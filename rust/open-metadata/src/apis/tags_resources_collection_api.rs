/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`create_category`]
#[derive(Clone, Debug, Default)]
pub struct CreateCategoryParams {
    pub body: Option<crate::models::CreateTagCategory>,
}

/// struct for passing parameters to the method [`create_primary_tag`]
#[derive(Clone, Debug, Default)]
pub struct CreatePrimaryTagParams {
    pub category: String,
    pub body: Option<crate::models::CreateTag>,
}

/// struct for passing parameters to the method [`create_secondary_tag`]
#[derive(Clone, Debug, Default)]
pub struct CreateSecondaryTagParams {
    pub category: String,
    pub primary_tag: String,
    pub body: Option<crate::models::CreateTag>,
}

/// struct for passing parameters to the method [`get_categories`]
#[derive(Clone, Debug, Default)]
pub struct GetCategoriesParams {
    pub fields: Option<String>,
}

/// struct for passing parameters to the method [`get_category`]
#[derive(Clone, Debug, Default)]
pub struct GetCategoryParams {
    pub category: String,
    pub fields: Option<String>,
}

/// struct for passing parameters to the method [`get_primary_tag`]
#[derive(Clone, Debug, Default)]
pub struct GetPrimaryTagParams {
    pub category: String,
    pub primary_tag: String,
    pub fields: Option<String>,
}

/// struct for passing parameters to the method [`get_secondary_tag`]
#[derive(Clone, Debug, Default)]
pub struct GetSecondaryTagParams {
    pub category: String,
    pub primary_tag: String,
    pub secondary_tag: String,
    pub fields: Option<String>,
}

/// struct for passing parameters to the method [`update_category`]
#[derive(Clone, Debug, Default)]
pub struct UpdateCategoryParams {
    pub category: String,
    pub body: Option<crate::models::CreateTagCategory>,
}

/// struct for passing parameters to the method [`update_primary_tag`]
#[derive(Clone, Debug, Default)]
pub struct UpdatePrimaryTagParams {
    pub category: String,
    pub primary_tag: String,
    pub body: Option<crate::models::CreateTag>,
}

/// struct for passing parameters to the method [`update_secondary_tag`]
#[derive(Clone, Debug, Default)]
pub struct UpdateSecondaryTagParams {
    pub category: String,
    pub primary_tag: String,
    pub secondary_tag: String,
    pub body: Option<crate::models::CreateTag>,
}

/// struct for typed errors of method [`create_category`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateCategoryError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_primary_tag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreatePrimaryTagError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_secondary_tag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateSecondaryTagError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_categories`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCategoriesError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_category`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetCategoryError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_primary_tag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetPrimaryTagError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_secondary_tag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSecondaryTagError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_category`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateCategoryError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_primary_tag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdatePrimaryTagError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_secondary_tag`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSecondaryTagError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

pub async fn create_category(
    configuration: &configuration::Configuration,
    params: CreateCategoryParams,
) -> Result<(), Error<CreateCategoryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/tags", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CreateCategoryError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_primary_tag(
    configuration: &configuration::Configuration,
    params: CreatePrimaryTagParams,
) -> Result<(), Error<CreatePrimaryTagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CreatePrimaryTagError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_secondary_tag(
    configuration: &configuration::Configuration,
    params: CreateSecondaryTagParams,
) -> Result<(), Error<CreateSecondaryTagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let primary_tag = params.primary_tag;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}/{primaryTag}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category),
        primaryTag = crate::apis::urlencode(primary_tag)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CreateSecondaryTagError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_categories(
    configuration: &configuration::Configuration,
    params: GetCategoriesParams,
) -> Result<crate::models::CategoryList, Error<GetCategoriesError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let fields = params.fields;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/tags", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder =
            local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCategoriesError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_category(
    configuration: &configuration::Configuration,
    params: GetCategoryParams,
) -> Result<crate::models::TagCategory, Error<GetCategoryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let fields = params.fields;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder =
            local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetCategoryError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_primary_tag(
    configuration: &configuration::Configuration,
    params: GetPrimaryTagParams,
) -> Result<crate::models::Tag, Error<GetPrimaryTagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let primary_tag = params.primary_tag;
    let fields = params.fields;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}/{primaryTag}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category),
        primaryTag = crate::apis::urlencode(primary_tag)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder =
            local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetPrimaryTagError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_secondary_tag(
    configuration: &configuration::Configuration,
    params: GetSecondaryTagParams,
) -> Result<crate::models::Tag, Error<GetSecondaryTagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let primary_tag = params.primary_tag;
    let secondary_tag = params.secondary_tag;
    let fields = params.fields;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}/{primaryTag}/{secondaryTag}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category),
        primaryTag = crate::apis::urlencode(primary_tag),
        secondaryTag = crate::apis::urlencode(secondary_tag)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = fields {
        local_var_req_builder =
            local_var_req_builder.query(&[("fields", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetSecondaryTagError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_category(
    configuration: &configuration::Configuration,
    params: UpdateCategoryParams,
) -> Result<(), Error<UpdateCategoryError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UpdateCategoryError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_primary_tag(
    configuration: &configuration::Configuration,
    params: UpdatePrimaryTagParams,
) -> Result<(), Error<UpdatePrimaryTagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let primary_tag = params.primary_tag;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}/{primaryTag}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category),
        primaryTag = crate::apis::urlencode(primary_tag)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UpdatePrimaryTagError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn update_secondary_tag(
    configuration: &configuration::Configuration,
    params: UpdateSecondaryTagParams,
) -> Result<(), Error<UpdateSecondaryTagError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let category = params.category;
    let primary_tag = params.primary_tag;
    let secondary_tag = params.secondary_tag;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/tags/{category}/{primaryTag}/{secondaryTag}",
        local_var_configuration.base_path,
        category = crate::apis::urlencode(category),
        primaryTag = crate::apis::urlencode(primary_tag),
        secondaryTag = crate::apis::urlencode(secondary_tag)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<UpdateSecondaryTagError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
