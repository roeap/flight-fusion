/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`create15`]
#[derive(Clone, Debug, Default)]
pub struct Create15Params {
    pub body: Option<crate::models::CreateMessagingService>,
}

/// struct for passing parameters to the method [`delete11`]
#[derive(Clone, Debug, Default)]
pub struct Delete11Params {
    pub id: String,
}

/// struct for passing parameters to the method [`get17`]
#[derive(Clone, Debug, Default)]
pub struct Get17Params {
    pub id: String,
}

/// struct for passing parameters to the method [`get_by_name12`]
#[derive(Clone, Debug, Default)]
pub struct GetByName12Params {
    pub name: String,
}

/// struct for passing parameters to the method [`get_version11`]
#[derive(Clone, Debug, Default)]
pub struct GetVersion11Params {
    pub id: String,
    pub version: String,
}

/// struct for passing parameters to the method [`list15`]
#[derive(Clone, Debug, Default)]
pub struct List15Params {
    pub limit: Option<i32>,
    pub before: Option<String>,
    pub after: Option<String>,
}

/// struct for passing parameters to the method [`list_versions11`]
#[derive(Clone, Debug, Default)]
pub struct ListVersions11Params {
    pub id: String,
}

/// struct for passing parameters to the method [`update2`]
#[derive(Clone, Debug, Default)]
pub struct Update2Params {
    pub id: String,
    pub body: Option<crate::models::CreateMessagingService>,
}

/// struct for typed errors of method [`create15`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Create15Error {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`delete11`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Delete11Error {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get17`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Get17Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_by_name12`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetByName12Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_version11`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetVersion11Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list15`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum List15Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`list_versions11`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ListVersions11Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update2`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Update2Error {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

pub async fn create15(
    configuration: &configuration::Configuration,
    params: Create15Params,
) -> Result<(), Error<Create15Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/services/messagingServices",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<Create15Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn delete11(
    configuration: &configuration::Configuration,
    params: Delete11Params,
) -> Result<(), Error<Delete11Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/services/messagingServices/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<Delete11Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get17(
    configuration: &configuration::Configuration,
    params: Get17Params,
) -> Result<crate::models::MessagingService, Error<Get17Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/services/messagingServices/{id}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Get17Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_by_name12(
    configuration: &configuration::Configuration,
    params: GetByName12Params,
) -> Result<crate::models::MessagingService, Error<GetByName12Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let name = params.name;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/services/messagingServices/name/{name}",
        local_var_configuration.base_path,
        name = crate::apis::urlencode(name)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetByName12Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_version11(
    configuration: &configuration::Configuration,
    params: GetVersion11Params,
) -> Result<crate::models::MessagingService, Error<GetVersion11Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;
    let version = params.version;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/services/messagingServices/{id}/versions/{version}",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id),
        version = crate::apis::urlencode(version)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetVersion11Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list15(
    configuration: &configuration::Configuration,
    params: List15Params,
) -> Result<crate::models::ResultListMessagingService, Error<List15Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let limit = params.limit;
    let before = params.before;
    let after = params.after;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/services/messagingServices",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = limit {
        local_var_req_builder =
            local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = before {
        local_var_req_builder =
            local_var_req_builder.query(&[("before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = after {
        local_var_req_builder =
            local_var_req_builder.query(&[("after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<List15Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn list_versions11(
    configuration: &configuration::Configuration,
    params: ListVersions11Params,
) -> Result<crate::models::EntityHistory, Error<ListVersions11Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let id = params.id;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/services/messagingServices/{id}/versions",
        local_var_configuration.base_path,
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ListVersions11Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

// pub async fn update2(
//     configuration: &configuration::Configuration,
//     params: Update2Params,
// ) -> Result<(), Error<Update2Error>> {
//     let local_var_configuration = configuration;
//
//     // unbox the parameters
//     let id = params.id;
//     let body = params.body;
//
//     let local_var_client = &local_var_configuration.client;
//
//     let local_var_uri_str = format!(
//         "{}/v1/services/messagingServices",
//         local_var_configuration.base_path,
//         id = crate::apis::urlencode(id)
//     );
//     let mut local_var_req_builder =
//         local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());
//
//     if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
//         local_var_req_builder =
//             local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
//     }
//     local_var_req_builder = local_var_req_builder.json(&body);
//
//     let local_var_req = local_var_req_builder.build()?;
//     let local_var_resp = local_var_client.execute(local_var_req).await?;
//
//     let local_var_status = local_var_resp.status();
//     let local_var_content = local_var_resp.text().await?;
//
//     if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
//         Ok(())
//     } else {
//         let local_var_entity: Option<Update2Error> = serde_json::from_str(&local_var_content).ok();
//         let local_var_error = ResponseContent {
//             status: local_var_status,
//             content: local_var_content,
//             entity: local_var_entity,
//         };
//         Err(Error::ResponseError(local_var_error))
//     }
// }
