/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`compute_percentile`]
#[derive(Clone, Debug, Default)]
pub struct ComputePercentileParams {
    pub entity: String,
    pub date: String,
}

/// struct for passing parameters to the method [`create20`]
#[derive(Clone, Debug, Default)]
pub struct Create20Params {
    pub entity: String,
    pub id: String,
    pub body: Option<crate::models::DailyCount>,
}

/// struct for passing parameters to the method [`create_by_name`]
#[derive(Clone, Debug, Default)]
pub struct CreateByNameParams {
    pub entity: String,
    pub fqn: String,
    pub body: Option<crate::models::DailyCount>,
}

/// struct for passing parameters to the method [`get23`]
#[derive(Clone, Debug, Default)]
pub struct Get23Params {
    pub entity: String,
    pub id: String,
    pub days: Option<i32>,
    pub date: Option<String>,
}

/// struct for passing parameters to the method [`get_by_name18`]
#[derive(Clone, Debug, Default)]
pub struct GetByName18Params {
    pub entity: String,
    pub fqn: String,
    pub days: Option<i32>,
    pub date: Option<String>,
}

/// struct for typed errors of method [`compute_percentile`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ComputePercentileError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create20`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Create20Error {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`create_by_name`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CreateByNameError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get23`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Get23Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_by_name18`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetByName18Error {
    UnknownValue(serde_json::Value),
}

pub async fn compute_percentile(
    configuration: &configuration::Configuration,
    params: ComputePercentileParams,
) -> Result<(), Error<ComputePercentileError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity = params.entity;
    let date = params.date;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/usage/compute.percentile/{entity}/{date}",
        local_var_configuration.base_path,
        entity = crate::apis::urlencode(entity),
        date = crate::apis::urlencode(date)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ComputePercentileError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create20(
    configuration: &configuration::Configuration,
    params: Create20Params,
) -> Result<(), Error<Create20Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity = params.entity;
    let id = params.id;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/usage/{entity}/{id}",
        local_var_configuration.base_path,
        entity = crate::apis::urlencode(entity),
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<Create20Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn create_by_name(
    configuration: &configuration::Configuration,
    params: CreateByNameParams,
) -> Result<(), Error<CreateByNameError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity = params.entity;
    let fqn = params.fqn;
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/usage/{entity}/name/{fqn}",
        local_var_configuration.base_path,
        entity = crate::apis::urlencode(entity),
        fqn = crate::apis::urlencode(fqn)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<CreateByNameError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get23(
    configuration: &configuration::Configuration,
    params: Get23Params,
) -> Result<crate::models::EntityUsage, Error<Get23Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity = params.entity;
    let id = params.id;
    let days = params.days;
    let date = params.date;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/usage/{entity}/{id}",
        local_var_configuration.base_path,
        entity = crate::apis::urlencode(entity),
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = days {
        local_var_req_builder =
            local_var_req_builder.query(&[("days", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder =
            local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Get23Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_by_name18(
    configuration: &configuration::Configuration,
    params: GetByName18Params,
) -> Result<crate::models::EntityUsage, Error<GetByName18Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity = params.entity;
    let fqn = params.fqn;
    let days = params.days;
    let date = params.date;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/usage/{entity}/name/{fqn}",
        local_var_configuration.base_path,
        entity = crate::apis::urlencode(entity),
        fqn = crate::apis::urlencode(fqn)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = days {
        local_var_req_builder =
            local_var_req_builder.query(&[("days", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder =
            local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetByName18Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
