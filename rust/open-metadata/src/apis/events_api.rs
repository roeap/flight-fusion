/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`get5`]
#[derive(Clone, Debug, Default)]
pub struct Get5Params {
    pub entity_created: Option<String>,
    pub entity_updated: Option<String>,
    pub entity_deleted: Option<String>,
    pub date: Option<String>,
}

/// struct for typed errors of method [`get5`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Get5Error {
    UnknownValue(serde_json::Value),
}

pub async fn get5(
    configuration: &configuration::Configuration,
    params: Get5Params,
) -> Result<crate::models::ResultListChangeEvent, Error<Get5Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity_created = params.entity_created;
    let entity_updated = params.entity_updated;
    let entity_deleted = params.entity_deleted;
    let date = params.date;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/events", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = entity_created {
        local_var_req_builder =
            local_var_req_builder.query(&[("entityCreated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = entity_updated {
        local_var_req_builder =
            local_var_req_builder.query(&[("entityUpdated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = entity_deleted {
        local_var_req_builder =
            local_var_req_builder.query(&[("entityDeleted", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = date {
        local_var_req_builder =
            local_var_req_builder.query(&[("date", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Get5Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
