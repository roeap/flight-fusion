/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for passing parameters to the method [`add_lineage`]
#[derive(Clone, Debug, Default)]
pub struct AddLineageParams {
    pub body: Option<crate::models::AddLineage>,
}

/// struct for passing parameters to the method [`get7`]
#[derive(Clone, Debug, Default)]
pub struct Get7Params {
    pub entity: String,
    pub id: String,
    pub upstream_depth: Option<i32>,
    pub downstream_depth: Option<i32>,
}

/// struct for passing parameters to the method [`get_by_name4`]
#[derive(Clone, Debug, Default)]
pub struct GetByName4Params {
    pub entity: String,
    pub fqn: String,
    pub upstream_depth: Option<i32>,
    pub downstream_depth: Option<i32>,
}

/// struct for typed errors of method [`add_lineage`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum AddLineageError {
    DefaultResponse(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get7`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum Get7Error {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_by_name4`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetByName4Error {
    UnknownValue(serde_json::Value),
}

pub async fn add_lineage(
    configuration: &configuration::Configuration,
    params: AddLineageParams,
) -> Result<(), Error<AddLineageError>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let body = params.body;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/v1/lineage", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<AddLineageError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get7(
    configuration: &configuration::Configuration,
    params: Get7Params,
) -> Result<crate::models::EntityLineage, Error<Get7Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity = params.entity;
    let id = params.id;
    let upstream_depth = params.upstream_depth;
    let downstream_depth = params.downstream_depth;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/lineage/{entity}/{id}",
        local_var_configuration.base_path,
        entity = crate::apis::urlencode(entity),
        id = crate::apis::urlencode(id)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = upstream_depth {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstreamDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = downstream_depth {
        local_var_req_builder =
            local_var_req_builder.query(&[("downstreamDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<Get7Error> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn get_by_name4(
    configuration: &configuration::Configuration,
    params: GetByName4Params,
) -> Result<crate::models::EntityLineage, Error<GetByName4Error>> {
    let local_var_configuration = configuration;

    // unbox the parameters
    let entity = params.entity;
    let fqn = params.fqn;
    let upstream_depth = params.upstream_depth;
    let downstream_depth = params.downstream_depth;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v1/lineage/{entity}/name/{fqn}",
        local_var_configuration.base_path,
        entity = crate::apis::urlencode(entity),
        fqn = crate::apis::urlencode(fqn)
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = upstream_depth {
        local_var_req_builder =
            local_var_req_builder.query(&[("upstreamDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = downstream_depth {
        local_var_req_builder =
            local_var_req_builder.query(&[("downstreamDepth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<GetByName4Error> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
