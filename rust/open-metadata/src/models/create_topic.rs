/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateTopic {
    /// Name that identifies a topic.
    #[serde(rename = "name")]
    pub name: String,
    /// Description of the topic instance. What it has and how to use it.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "service")]
    pub service: Box<crate::models::EntityReference>,
    /// Number of partitions into which the topic is divided.
    #[serde(rename = "partitions")]
    pub partitions: i32,
    /// Schema used for message serialization. Optional as some topics may not have associated schemas.
    #[serde(rename = "schemaText", skip_serializing_if = "Option::is_none")]
    pub schema_text: Option<String>,
    /// Schema type used for the message.
    #[serde(rename = "schemaType", skip_serializing_if = "Option::is_none")]
    pub schema_type: Option<SchemaType>,
    /// Topic clean up policy. For Kafka - `cleanup.policy` configuration.
    #[serde(rename = "cleanupPolicies", skip_serializing_if = "Option::is_none")]
    pub cleanup_policies: Option<Vec<CleanupPolicies>>,
    /// Replication Factor in integer (more than 1).
    #[serde(rename = "replicationFactor", skip_serializing_if = "Option::is_none")]
    pub replication_factor: Option<i32>,
    /// Retention time in milliseconds. For Kafka - `retention.ms` configuration.
    #[serde(rename = "retentionTime", skip_serializing_if = "Option::is_none")]
    pub retention_time: Option<f64>,
    /// Maximum message size in bytes. For Kafka - `max.message.bytes` configuration.
    #[serde(rename = "maximumMessageSize", skip_serializing_if = "Option::is_none")]
    pub maximum_message_size: Option<i32>,
    /// Minimum number replicas in sync to control durability. For Kafka - `min.insync.replicas` configuration.
    #[serde(
        rename = "minimumInSyncReplicas",
        skip_serializing_if = "Option::is_none"
    )]
    pub minimum_in_sync_replicas: Option<i32>,
    /// Maximum size of a partition in bytes before old data is discarded. For Kafka - `retention.bytes` configuration.
    #[serde(rename = "retentionSize", skip_serializing_if = "Option::is_none")]
    pub retention_size: Option<f64>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    /// Tags for this topic
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
}

impl CreateTopic {
    pub fn new(
        name: String,
        service: crate::models::EntityReference,
        partitions: i32,
    ) -> CreateTopic {
        CreateTopic {
            name,
            description: None,
            service: Box::new(service),
            partitions,
            schema_text: None,
            schema_type: None,
            cleanup_policies: None,
            replication_factor: None,
            retention_time: None,
            maximum_message_size: None,
            minimum_in_sync_replicas: None,
            retention_size: None,
            owner: None,
            tags: None,
        }
    }
}

/// Schema type used for the message.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SchemaType {
    #[serde(rename = "Avro")]
    Avro,
    #[serde(rename = "Protobuf")]
    Protobuf,
    #[serde(rename = "JSON")]
    JSON,
    #[serde(rename = "Other")]
    Other,
}

impl Default for SchemaType {
    fn default() -> SchemaType {
        Self::Avro
    }
}
/// Topic clean up policy. For Kafka - `cleanup.policy` configuration.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CleanupPolicies {
    #[serde(rename = "DELETE")]
    DELETE,
    #[serde(rename = "COMPACT")]
    COMPACT,
}

impl Default for CleanupPolicies {
    fn default() -> CleanupPolicies {
        Self::DELETE
    }
}
