/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Pipeline {
    /// Unique id used to identify an entity.
    #[serde(rename = "id")]
    pub id: String,
    /// Name that identifies this pipeline instance uniquely.
    #[serde(rename = "name")]
    pub name: String,
    /// Display Name that identifies this Pipeline. It could be title or label from the source services.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// A unique name that identifies a pipeline in the format 'ServiceName.PipelineName'.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Description of this Pipeline.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// User who made the update.
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// Pipeline  URL to visit/manage. This URL points to respective pipeline service UI.
    #[serde(rename = "pipelineUrl", skip_serializing_if = "Option::is_none")]
    pub pipeline_url: Option<String>,
    /// Concurrency of the Pipeline.
    #[serde(rename = "concurrency", skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i32>,
    /// Pipeline Code Location.
    #[serde(rename = "pipelineLocation", skip_serializing_if = "Option::is_none")]
    pub pipeline_location: Option<String>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// All the tasks that are part of pipeline.
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<crate::models::Task>>,
    #[serde(rename = "followers", skip_serializing_if = "Option::is_none")]
    pub followers: Option<Vec<crate::models::EntityReference>>,
    /// Tags for this Pipeline.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    /// URI that points to a resource.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "service")]
    pub service: Box<crate::models::EntityReference>,
    /// Type of pipeline service - Airflow or Prefect.
    #[serde(rename = "serviceType", skip_serializing_if = "Option::is_none")]
    pub service_type: Option<ServiceType>,
    #[serde(rename = "changeDescription", skip_serializing_if = "Option::is_none")]
    pub change_description: Option<Box<crate::models::ChangeDescription>>,
}

impl Pipeline {
    pub fn new(id: String, name: String, service: crate::models::EntityReference) -> Pipeline {
        Pipeline {
            id,
            name,
            display_name: None,
            fully_qualified_name: None,
            description: None,
            version: None,
            updated_at: None,
            updated_by: None,
            pipeline_url: None,
            concurrency: None,
            pipeline_location: None,
            start_date: None,
            tasks: None,
            followers: None,
            tags: None,
            href: None,
            owner: None,
            service: Box::new(service),
            service_type: None,
            change_description: None,
        }
    }
}

/// Type of pipeline service - Airflow or Prefect.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceType {
    #[serde(rename = "Airflow")]
    Airflow,
    #[serde(rename = "Prefect")]
    Prefect,
    #[serde(rename = "Glue")]
    Glue,
}

impl Default for ServiceType {
    fn default() -> ServiceType {
        Self::Airflow
    }
}
