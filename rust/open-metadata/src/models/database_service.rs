/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DatabaseService {
    /// Unique id used to identify an entity.
    #[serde(rename = "id")]
    pub id: String,
    /// Name that identifies this database service.
    #[serde(rename = "name")]
    pub name: String,
    /// Display Name that identifies this database service.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
    #[serde(rename = "serviceType")]
    pub service_type: ServiceType,
    /// Description of a database service instance.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// User who made the update.
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// URI that points to a resource.
    #[serde(rename = "href")]
    pub href: String,
    #[serde(rename = "jdbc")]
    pub jdbc: Box<crate::models::JdbcInfo>,
    #[serde(rename = "ingestionSchedule", skip_serializing_if = "Option::is_none")]
    pub ingestion_schedule: Option<Box<crate::models::Schedule>>,
    #[serde(rename = "changeDescription", skip_serializing_if = "Option::is_none")]
    pub change_description: Option<Box<crate::models::ChangeDescription>>,
}

impl DatabaseService {
    pub fn new(
        id: String,
        name: String,
        service_type: ServiceType,
        href: String,
        jdbc: crate::models::JdbcInfo,
    ) -> DatabaseService {
        DatabaseService {
            id,
            name,
            display_name: None,
            service_type,
            description: None,
            version: None,
            updated_at: None,
            updated_by: None,
            href,
            jdbc: Box::new(jdbc),
            ingestion_schedule: None,
            change_description: None,
        }
    }
}

/// Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceType {
    #[serde(rename = "BigQuery")]
    BigQuery,
    #[serde(rename = "MySQL")]
    MySQL,
    #[serde(rename = "Redshift")]
    Redshift,
    #[serde(rename = "Snowflake")]
    Snowflake,
    #[serde(rename = "Postgres")]
    Postgres,
    #[serde(rename = "MSSQL")]
    MSSQL,
    #[serde(rename = "Oracle")]
    Oracle,
    #[serde(rename = "Athena")]
    Athena,
    #[serde(rename = "Hive")]
    Hive,
    #[serde(rename = "Presto")]
    Presto,
    #[serde(rename = "Trino")]
    Trino,
    #[serde(rename = "Vertica")]
    Vertica,
    #[serde(rename = "Glue")]
    Glue,
    #[serde(rename = "MariaDB")]
    MariaDB,
    #[serde(rename = "Druid")]
    Druid,
}

impl Default for ServiceType {
    fn default() -> ServiceType {
        Self::BigQuery
    }
}
