/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Ingestion {
    /// Unique id used to identify an entity.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name that identifies this ingestion instance uniquely.
    #[serde(rename = "name")]
    pub name: String,
    /// Display Name that identifies this Ingestion.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Description of the workflow.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    /// Name that uniquely identifies a Ingestion.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Type of Ingestion - Bigquery, Redshift, Snowflake etc...
    #[serde(rename = "ingestionType", skip_serializing_if = "Option::is_none")]
    pub ingestion_type: Option<IngestionType>,
    /// Tags associated with the Ingestion.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    /// Deploy the workflow by overwriting existing workflow with the same name.
    #[serde(rename = "forceDeploy", skip_serializing_if = "Option::is_none")]
    pub force_deploy: Option<bool>,
    /// pause the workflow from running once the deploy is finished successfully.
    #[serde(rename = "pauseWorkflow", skip_serializing_if = "Option::is_none")]
    pub pause_workflow: Option<bool>,
    /// Concurrency of the Pipeline.
    #[serde(rename = "concurrency", skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i32>,
    /// Date in ISO 8601 format in UTC. Example - '2018-11-13'.
    #[serde(rename = "startDate")]
    pub start_date: String,
    /// Date in ISO 8601 format in UTC. Example - '2018-11-13'.
    #[serde(rename = "endDate", skip_serializing_if = "Option::is_none")]
    pub end_date: Option<String>,
    /// Date in ISO 8601 format in UTC. Example - '2018-11-13'.
    #[serde(rename = "nextExecutionDate", skip_serializing_if = "Option::is_none")]
    pub next_execution_date: Option<String>,
    /// Timezone in which workflow going to be scheduled.
    #[serde(rename = "workflowTimezone", skip_serializing_if = "Option::is_none")]
    pub workflow_timezone: Option<String>,
    /// Retry workflow in case of failure.
    #[serde(rename = "retries", skip_serializing_if = "Option::is_none")]
    pub retries: Option<i32>,
    /// Delay between retries in seconds.
    #[serde(rename = "retryDelay", skip_serializing_if = "Option::is_none")]
    pub retry_delay: Option<i32>,
    /// Run past executions if the start date is in the past.
    #[serde(rename = "workflowCatchup", skip_serializing_if = "Option::is_none")]
    pub workflow_catchup: Option<bool>,
    /// Scheduler Interval for the Workflow in cron format.
    #[serde(rename = "scheduleInterval", skip_serializing_if = "Option::is_none")]
    pub schedule_interval: Option<String>,
    /// Timeout for the workflow in seconds.
    #[serde(rename = "workflowTimeout", skip_serializing_if = "Option::is_none")]
    pub workflow_timeout: Option<i32>,
    #[serde(rename = "connectorConfig")]
    pub connector_config: Box<crate::models::ConnectorConfig>,
    /// List of executions and status for the Ingestion Pipeline.
    #[serde(rename = "ingestionStatuses", skip_serializing_if = "Option::is_none")]
    pub ingestion_statuses: Option<Vec<crate::models::IngestionStatus>>,
    #[serde(rename = "service")]
    pub service: Box<crate::models::EntityReference>,
    /// URI that points to a resource.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// User who made the update.
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    #[serde(rename = "changeDescription", skip_serializing_if = "Option::is_none")]
    pub change_description: Option<Box<crate::models::ChangeDescription>>,
}

impl Ingestion {
    pub fn new(
        name: String,
        start_date: String,
        connector_config: crate::models::ConnectorConfig,
        service: crate::models::EntityReference,
    ) -> Ingestion {
        Ingestion {
            id: None,
            name,
            display_name: None,
            description: None,
            owner: None,
            fully_qualified_name: None,
            ingestion_type: None,
            tags: None,
            force_deploy: None,
            pause_workflow: None,
            concurrency: None,
            start_date,
            end_date: None,
            next_execution_date: None,
            workflow_timezone: None,
            retries: None,
            retry_delay: None,
            workflow_catchup: None,
            schedule_interval: None,
            workflow_timeout: None,
            connector_config: Box::new(connector_config),
            ingestion_statuses: None,
            service: Box::new(service),
            href: None,
            version: None,
            updated_at: None,
            updated_by: None,
            change_description: None,
        }
    }
}

/// Type of Ingestion - Bigquery, Redshift, Snowflake etc...
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum IngestionType {
    #[serde(rename = "bigquery")]
    Bigquery,
    #[serde(rename = "bigquery_usage")]
    BigqueryUsage,
    #[serde(rename = "redshift")]
    Redshift,
    #[serde(rename = "redshift_usage")]
    RedshiftUsage,
    #[serde(rename = "snowflake")]
    Snowflake,
    #[serde(rename = "snowflake_usage")]
    SnowflakeUsage,
    #[serde(rename = "hive")]
    Hive,
    #[serde(rename = "mssql")]
    Mssql,
    #[serde(rename = "looker")]
    Looker,
    #[serde(rename = "presto")]
    Presto,
    #[serde(rename = "postgres")]
    Postgres,
    #[serde(rename = "redash")]
    Redash,
    #[serde(rename = "salesforce")]
    Salesforce,
}

impl Default for IngestionType {
    fn default() -> IngestionType {
        Self::Bigquery
    }
}
