/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateLocation {
    /// Local name (not fully qualified name) of a location.
    #[serde(rename = "name")]
    pub name: String,
    /// Description of the location instance.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// This schema defines the type used for describing different types of Location.
    #[serde(rename = "locationType", skip_serializing_if = "Option::is_none")]
    pub location_type: Option<LocationType>,
    /// Tags for this location
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "service")]
    pub service: Box<crate::models::EntityReference>,
}

impl CreateLocation {
    pub fn new(name: String, service: crate::models::EntityReference) -> CreateLocation {
        CreateLocation {
            name,
            description: None,
            location_type: None,
            tags: None,
            owner: None,
            service: Box::new(service),
        }
    }
}

/// This schema defines the type used for describing different types of Location.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum LocationType {
    #[serde(rename = "Bucket")]
    Bucket,
    #[serde(rename = "Prefix")]
    Prefix,
    #[serde(rename = "Database")]
    Database,
    #[serde(rename = "Table")]
    Table,
}

impl Default for LocationType {
    fn default() -> LocationType {
        Self::Bucket
    }
}
