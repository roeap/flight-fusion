/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ChangeEvent {
    /// Type of event.
    #[serde(rename = "eventType")]
    pub event_type: EventType,
    /// Entity type that changed. Use the schema of this entity to process the entity attribute.
    #[serde(rename = "entityType")]
    pub entity_type: String,
    /// Unique id used to identify an entity.
    #[serde(rename = "entityId")]
    pub entity_id: String,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "previousVersion", skip_serializing_if = "Option::is_none")]
    pub previous_version: Option<f64>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "currentVersion", skip_serializing_if = "Option::is_none")]
    pub current_version: Option<f64>,
    /// Name of the user whose activity resulted in the change.
    #[serde(rename = "userName", skip_serializing_if = "Option::is_none")]
    pub user_name: Option<String>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "dateTime")]
    pub date_time: String,
    #[serde(rename = "changeDescription", skip_serializing_if = "Option::is_none")]
    pub change_description: Option<Box<crate::models::ChangeDescription>>,
    /// For `eventType` `entityCreated`, this field captures JSON coded string of the entity using the schema corresponding to `entityType`.
    #[serde(rename = "entity", skip_serializing_if = "Option::is_none")]
    pub entity: Option<serde_json::Value>,
}

impl ChangeEvent {
    pub fn new(
        event_type: EventType,
        entity_type: String,
        entity_id: String,
        date_time: String,
    ) -> ChangeEvent {
        ChangeEvent {
            event_type,
            entity_type,
            entity_id,
            previous_version: None,
            current_version: None,
            user_name: None,
            date_time,
            change_description: None,
            entity: None,
        }
    }
}

/// Type of event.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "ENTITY_CREATED")]
    CREATED,
    #[serde(rename = "ENTITY_UPDATED")]
    UPDATED,
    #[serde(rename = "ENTITY_DELETED")]
    DELETED,
}

impl Default for EventType {
    fn default() -> EventType {
        Self::CREATED
    }
}
