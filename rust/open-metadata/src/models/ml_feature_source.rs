/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MlFeatureSource {
    /// Local name (not fully qualified name) of a ML Feature source.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This enum defines the type of data of a ML Feature source.
    #[serde(rename = "dataType", skip_serializing_if = "Option::is_none")]
    pub data_type: Option<DataType>,
    /// Description of the feature source.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Fully qualified name of the ML Feature Source that includes `serviceName.[databaseName].tableName/fileName/apiName.columnName[.nestedColumnName]`.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Tags associated with the feature source.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
}

impl MlFeatureSource {
    pub fn new() -> MlFeatureSource {
        MlFeatureSource {
            name: None,
            data_type: None,
            description: None,
            fully_qualified_name: None,
            tags: None,
        }
    }
}

/// This enum defines the type of data of a ML Feature source.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataType {
    #[serde(rename = "INTEGER")]
    INTEGER,
    #[serde(rename = "NUMBER")]
    NUMBER,
    #[serde(rename = "STRING")]
    STRING,
    #[serde(rename = "ARRAY")]
    ARRAY,
    #[serde(rename = "DATE")]
    DATE,
    #[serde(rename = "TIMESTAMP")]
    TIMESTAMP,
    #[serde(rename = "OBJECT")]
    OBJECT,
    #[serde(rename = "BOOLEAN")]
    BOOLEAN,
}

impl Default for DataType {
    fn default() -> DataType {
        Self::INTEGER
    }
}
