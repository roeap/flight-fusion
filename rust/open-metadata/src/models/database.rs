/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Database {
    /// Unique id used to identify an entity.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// Name that identifies the database.
    #[serde(rename = "name")]
    pub name: String,
    /// Name that uniquely identifies a database in the format 'ServiceName.DatabaseName'.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Display Name that identifies this database.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Description of the database instance.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<i64>,
    /// User who made the update.
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// URI that points to a resource.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "service")]
    pub service: Box<crate::models::EntityReference>,
    /// Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
    #[serde(rename = "serviceType", skip_serializing_if = "Option::is_none")]
    pub service_type: Option<ServiceType>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "usageSummary", skip_serializing_if = "Option::is_none")]
    pub usage_summary: Option<Box<crate::models::UsageDetails>>,
    #[serde(rename = "tables", skip_serializing_if = "Option::is_none")]
    pub tables: Option<Vec<crate::models::EntityReference>>,
    #[serde(rename = "changeDescription", skip_serializing_if = "Option::is_none")]
    pub change_description: Option<Box<crate::models::ChangeDescription>>,
}

impl Database {
    pub fn new(name: String, service: crate::models::EntityReference) -> Database {
        Database {
            id: None,
            name,
            fully_qualified_name: None,
            display_name: None,
            description: None,
            version: None,
            updated_at: None,
            updated_by: None,
            href: None,
            owner: None,
            service: Box::new(service),
            service_type: None,
            location: None,
            usage_summary: None,
            tables: None,
            change_description: None,
        }
    }
}

/// Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceType {
    #[serde(rename = "BigQuery")]
    BigQuery,
    #[serde(rename = "MySQL")]
    MySQL,
    #[serde(rename = "Redshift")]
    Redshift,
    #[serde(rename = "Snowflake")]
    Snowflake,
    #[serde(rename = "Postgres")]
    Postgres,
    #[serde(rename = "MSSQL")]
    MSSQL,
    #[serde(rename = "Oracle")]
    Oracle,
    #[serde(rename = "Athena")]
    Athena,
    #[serde(rename = "Hive")]
    Hive,
    #[serde(rename = "Presto")]
    Presto,
    #[serde(rename = "Trino")]
    Trino,
    #[serde(rename = "Vertica")]
    Vertica,
    #[serde(rename = "Glue")]
    Glue,
    #[serde(rename = "MariaDB")]
    MariaDB,
    #[serde(rename = "Druid")]
    Druid,
}

impl Default for ServiceType {
    fn default() -> ServiceType {
        Self::BigQuery
    }
}
