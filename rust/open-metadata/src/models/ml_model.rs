/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MlModel {
    /// Unique id used to identify an entity.
    #[serde(rename = "id")]
    pub id: String,
    /// Name that identifies this ML Model.
    #[serde(rename = "name")]
    pub name: String,
    /// A unique name that identifies an ML Model.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Display Name that identifies this ML Model.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Description of the ML Model, what it is, and how to use it.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Algorithm used to train the ML Model.
    #[serde(rename = "algorithm")]
    pub algorithm: String,
    /// Features used to train the ML Model.
    #[serde(rename = "mlFeatures", skip_serializing_if = "Option::is_none")]
    pub ml_features: Option<Vec<crate::models::MlFeature>>,
    /// Hyper Parameters used to train the ML Model.
    #[serde(rename = "mlHyperParameters", skip_serializing_if = "Option::is_none")]
    pub ml_hyper_parameters: Option<Vec<crate::models::MlHyperParameter>>,
    #[serde(rename = "dashboard", skip_serializing_if = "Option::is_none")]
    pub dashboard: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "mlStore", skip_serializing_if = "Option::is_none")]
    pub ml_store: Option<Box<crate::models::MlStore>>,
    /// URI that points to a resource.
    #[serde(rename = "server", skip_serializing_if = "Option::is_none")]
    pub server: Option<String>,
    /// URI that points to a resource.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "followers", skip_serializing_if = "Option::is_none")]
    pub followers: Option<Vec<crate::models::EntityReference>>,
    /// Tags for this ML Model.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    #[serde(rename = "usageSummary", skip_serializing_if = "Option::is_none")]
    pub usage_summary: Option<Box<crate::models::UsageDetails>>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// User who made the update.
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    #[serde(rename = "changeDescription", skip_serializing_if = "Option::is_none")]
    pub change_description: Option<Box<crate::models::ChangeDescription>>,
}

impl MlModel {
    pub fn new(id: String, name: String, algorithm: String) -> MlModel {
        MlModel {
            id,
            name,
            fully_qualified_name: None,
            display_name: None,
            description: None,
            algorithm,
            ml_features: None,
            ml_hyper_parameters: None,
            dashboard: None,
            ml_store: None,
            server: None,
            href: None,
            owner: None,
            followers: None,
            tags: None,
            usage_summary: None,
            version: None,
            updated_at: None,
            updated_by: None,
            change_description: None,
        }
    }
}
