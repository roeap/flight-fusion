/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateDashboard {
    /// Name that identifies this dashboard.
    #[serde(rename = "name")]
    pub name: String,
    /// Display Name that identifies this Dashboard. It could be title or label from the source services
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Description of the database instance. What it has and how to use it.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Dashboard URL
    #[serde(rename = "dashboardUrl", skip_serializing_if = "Option::is_none")]
    pub dashboard_url: Option<String>,
    /// All the charts included in this Dashboard.
    #[serde(rename = "charts", skip_serializing_if = "Option::is_none")]
    pub charts: Option<Vec<crate::models::EntityReference>>,
    /// Tags for this chart
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "service")]
    pub service: Box<crate::models::EntityReference>,
}

impl CreateDashboard {
    pub fn new(name: String, service: crate::models::EntityReference) -> CreateDashboard {
        CreateDashboard {
            name,
            display_name: None,
            description: None,
            dashboard_url: None,
            charts: None,
            tags: None,
            owner: None,
            service: Box::new(service),
        }
    }
}
