/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Column {
    /// Local name (not fully qualified name) of the column. ColumnName is `-` when the column is not named in struct dataType. For example, BigQuery supports struct with unnamed fields.
    #[serde(rename = "name")]
    pub name: String,
    /// This enum defines the type of data stored in a column.
    #[serde(rename = "dataType")]
    pub data_type: DataType,
    /// This enum defines the type of data stored in a column.
    #[serde(rename = "arrayDataType", skip_serializing_if = "Option::is_none")]
    pub array_data_type: Option<ArrayDataType>,
    /// Length of `char`, `varchar`, `binary`, `varbinary` `dataTypes`, else null. For example, `varchar(20)` has dataType as `varchar` and dataLength as `20`.
    #[serde(rename = "dataLength", skip_serializing_if = "Option::is_none")]
    pub data_length: Option<i32>,
    /// Display name used for dataType. This is useful for complex types, such as `array<int>, map<int,string>, struct<>, and union types.
    #[serde(rename = "dataTypeDisplay", skip_serializing_if = "Option::is_none")]
    pub data_type_display: Option<String>,
    /// Description of the column.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Fully qualified name of the column that includes `serviceName.databaseName.tableName.columnName[.nestedColumnName]`. When columnName is null for dataType struct fields, `field_#` where `#` is field index is used. For map dataType, for key the field name `key` is used and for the value field `value` is used.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Tags associated with the column.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    /// This enum defines the type for column constraint.
    #[serde(rename = "constraint", skip_serializing_if = "Option::is_none")]
    pub constraint: Option<Constraint>,
    /// Ordinal position of the column.
    #[serde(rename = "ordinalPosition", skip_serializing_if = "Option::is_none")]
    pub ordinal_position: Option<i32>,
    /// Json schema only if the dataType is JSON else null.
    #[serde(rename = "jsonSchema", skip_serializing_if = "Option::is_none")]
    pub json_schema: Option<String>,
    /// Child columns if dataType or arrayDataType is `map`, `struct`, or `union` else `null`.
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<crate::models::Column>>,
}

impl Column {
    pub fn new(name: String, data_type: DataType) -> Column {
        Column {
            name,
            data_type,
            array_data_type: None,
            data_length: None,
            data_type_display: None,
            description: None,
            fully_qualified_name: None,
            tags: None,
            constraint: None,
            ordinal_position: None,
            json_schema: None,
            children: None,
        }
    }
}

/// This enum defines the type of data stored in a column.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataType {
    #[serde(rename = "NUMBER")]
    NUMBER,
    #[serde(rename = "TINYINT")]
    TINYINT,
    #[serde(rename = "SMALLINT")]
    SMALLINT,
    #[serde(rename = "INT")]
    INT,
    #[serde(rename = "BIGINT")]
    BIGINT,
    #[serde(rename = "BYTEINT")]
    BYTEINT,
    #[serde(rename = "BYTES")]
    BYTES,
    #[serde(rename = "FLOAT")]
    FLOAT,
    #[serde(rename = "DOUBLE")]
    DOUBLE,
    #[serde(rename = "DECIMAL")]
    DECIMAL,
    #[serde(rename = "NUMERIC")]
    NUMERIC,
    #[serde(rename = "TIMESTAMP")]
    TIMESTAMP,
    #[serde(rename = "TIME")]
    TIME,
    #[serde(rename = "DATE")]
    DATE,
    #[serde(rename = "DATETIME")]
    DATETIME,
    #[serde(rename = "INTERVAL")]
    INTERVAL,
    #[serde(rename = "STRING")]
    STRING,
    #[serde(rename = "MEDIUMTEXT")]
    MEDIUMTEXT,
    #[serde(rename = "TEXT")]
    TEXT,
    #[serde(rename = "CHAR")]
    CHAR,
    #[serde(rename = "VARCHAR")]
    VARCHAR,
    #[serde(rename = "BOOLEAN")]
    BOOLEAN,
    #[serde(rename = "BINARY")]
    BINARY,
    #[serde(rename = "VARBINARY")]
    VARBINARY,
    #[serde(rename = "ARRAY")]
    ARRAY,
    #[serde(rename = "BLOB")]
    BLOB,
    #[serde(rename = "LONGBLOB")]
    LONGBLOB,
    #[serde(rename = "MEDIUMBLOB")]
    MEDIUMBLOB,
    #[serde(rename = "MAP")]
    MAP,
    #[serde(rename = "STRUCT")]
    _STRUCT,
    #[serde(rename = "UNION")]
    UNION,
    #[serde(rename = "SET")]
    SET,
    #[serde(rename = "GEOGRAPHY")]
    GEOGRAPHY,
    #[serde(rename = "ENUM")]
    _ENUM,
    #[serde(rename = "JSON")]
    JSON,
}

impl Default for DataType {
    fn default() -> DataType {
        Self::NUMBER
    }
}
/// This enum defines the type of data stored in a column.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ArrayDataType {
    #[serde(rename = "NUMBER")]
    NUMBER,
    #[serde(rename = "TINYINT")]
    TINYINT,
    #[serde(rename = "SMALLINT")]
    SMALLINT,
    #[serde(rename = "INT")]
    INT,
    #[serde(rename = "BIGINT")]
    BIGINT,
    #[serde(rename = "BYTEINT")]
    BYTEINT,
    #[serde(rename = "BYTES")]
    BYTES,
    #[serde(rename = "FLOAT")]
    FLOAT,
    #[serde(rename = "DOUBLE")]
    DOUBLE,
    #[serde(rename = "DECIMAL")]
    DECIMAL,
    #[serde(rename = "NUMERIC")]
    NUMERIC,
    #[serde(rename = "TIMESTAMP")]
    TIMESTAMP,
    #[serde(rename = "TIME")]
    TIME,
    #[serde(rename = "DATE")]
    DATE,
    #[serde(rename = "DATETIME")]
    DATETIME,
    #[serde(rename = "INTERVAL")]
    INTERVAL,
    #[serde(rename = "STRING")]
    STRING,
    #[serde(rename = "MEDIUMTEXT")]
    MEDIUMTEXT,
    #[serde(rename = "TEXT")]
    TEXT,
    #[serde(rename = "CHAR")]
    CHAR,
    #[serde(rename = "VARCHAR")]
    VARCHAR,
    #[serde(rename = "BOOLEAN")]
    BOOLEAN,
    #[serde(rename = "BINARY")]
    BINARY,
    #[serde(rename = "VARBINARY")]
    VARBINARY,
    #[serde(rename = "ARRAY")]
    ARRAY,
    #[serde(rename = "BLOB")]
    BLOB,
    #[serde(rename = "LONGBLOB")]
    LONGBLOB,
    #[serde(rename = "MEDIUMBLOB")]
    MEDIUMBLOB,
    #[serde(rename = "MAP")]
    MAP,
    #[serde(rename = "STRUCT")]
    _STRUCT,
    #[serde(rename = "UNION")]
    UNION,
    #[serde(rename = "SET")]
    SET,
    #[serde(rename = "GEOGRAPHY")]
    GEOGRAPHY,
    #[serde(rename = "ENUM")]
    _ENUM,
    #[serde(rename = "JSON")]
    JSON,
}

impl Default for ArrayDataType {
    fn default() -> ArrayDataType {
        Self::NUMBER
    }
}
/// This enum defines the type for column constraint.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Constraint {
    #[serde(rename = "NULL")]
    NULL,
    #[serde(rename = "NOT_NULL")]
    NOTNULL,
    #[serde(rename = "UNIQUE")]
    UNIQUE,
    #[serde(rename = "PRIMARY_KEY")]
    PRIMARYKEY,
}

impl Default for Constraint {
    fn default() -> Constraint {
        Self::NULL
    }
}
