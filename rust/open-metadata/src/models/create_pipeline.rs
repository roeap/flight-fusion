/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreatePipeline {
    /// Name that identifies this pipeline instance uniquely.
    #[serde(rename = "name")]
    pub name: String,
    /// Display Name that identifies this Pipeline. It could be title or label from the source services.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Description of the database instance. What it has and how to use it.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Pipeline  URL to visit/manage. This URL points to respective pipeline service UI
    #[serde(rename = "pipelineUrl", skip_serializing_if = "Option::is_none")]
    pub pipeline_url: Option<String>,
    /// Concurrency of the Pipeline
    #[serde(rename = "concurrency", skip_serializing_if = "Option::is_none")]
    pub concurrency: Option<i32>,
    /// Pipeline Code Location
    #[serde(rename = "pipelineLocation", skip_serializing_if = "Option::is_none")]
    pub pipeline_location: Option<String>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "startDate", skip_serializing_if = "Option::is_none")]
    pub start_date: Option<String>,
    /// All the tasks that are part of pipeline.
    #[serde(rename = "tasks", skip_serializing_if = "Option::is_none")]
    pub tasks: Option<Vec<crate::models::Task>>,
    /// Tags for this Pipeline.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    #[serde(rename = "service")]
    pub service: Box<crate::models::EntityReference>,
}

impl CreatePipeline {
    pub fn new(name: String, service: crate::models::EntityReference) -> CreatePipeline {
        CreatePipeline {
            name,
            display_name: None,
            description: None,
            pipeline_url: None,
            concurrency: None,
            pipeline_location: None,
            start_date: None,
            tasks: None,
            tags: None,
            owner: None,
            service: Box::new(service),
        }
    }
}
