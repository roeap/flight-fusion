/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Tag {
    /// Name of the tag.
    #[serde(rename = "name")]
    pub name: String,
    /// Unique name of the tag of format Category.PrimaryTag.SecondaryTag.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Unique name of the tag category.
    #[serde(rename = "description")]
    pub description: String,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// User who made the update.
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// URI that points to a resource.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
    /// Count of how many times this tag and children tags are used.
    #[serde(rename = "usageCount", skip_serializing_if = "Option::is_none")]
    pub usage_count: Option<i32>,
    /// If the tag is deprecated.
    #[serde(rename = "deprecated", skip_serializing_if = "Option::is_none")]
    pub deprecated: Option<bool>,
    /// Fully qualified names of tags associated with this tag. Associated tags captures relationship of one tag to another automatically. As an example a tag 'User.PhoneNumber' might have an associated tag 'PII.Sensitive'. When 'User.Address' is used to label a column in a table, 'PII.Sensitive' label is also applied automatically due to Associated tag relationship.
    #[serde(rename = "associatedTags", skip_serializing_if = "Option::is_none")]
    pub associated_tags: Option<Vec<String>>,
    /// Tags under this tag group or empty for tags at the leaf level.
    #[serde(rename = "children", skip_serializing_if = "Option::is_none")]
    pub children: Option<Vec<crate::models::Tag>>,
}

impl Tag {
    pub fn new(name: String, description: String) -> Tag {
        Tag {
            name,
            fully_qualified_name: None,
            description,
            version: None,
            updated_at: None,
            updated_by: None,
            href: None,
            usage_count: None,
            deprecated: None,
            associated_tags: None,
            children: None,
        }
    }
}
