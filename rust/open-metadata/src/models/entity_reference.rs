/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct EntityReference {
    /// Unique id used to identify an entity.
    #[serde(rename = "id")]
    pub id: String,
    /// Entity type/class name - Examples: `database`, `table`, `metrics`, `databaseService`, `dashboardService`...
    #[serde(rename = "type")]
    pub _type: String,
    /// Name of the entity instance. For entities such as tables, databases where the name is not unique, fullyQualifiedName is returned in this field.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Optional description of entity.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Display Name that identifies this entity.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// URI that points to a resource.
    #[serde(rename = "href", skip_serializing_if = "Option::is_none")]
    pub href: Option<String>,
}

impl EntityReference {
    pub fn new(id: String, _type: String) -> EntityReference {
        EntityReference {
            id,
            _type,
            name: None,
            description: None,
            display_name: None,
            href: None,
        }
    }
}
