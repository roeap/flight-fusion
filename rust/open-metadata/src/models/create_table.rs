/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateTable {
    /// Local name (not fully qualified name) of a table.
    #[serde(rename = "name")]
    pub name: String,
    /// Description of entity instance.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// This schema defines the type used for describing different types of tables.
    #[serde(rename = "tableType", skip_serializing_if = "Option::is_none")]
    pub table_type: Option<TableType>,
    /// Name of the tables in the database
    #[serde(rename = "columns")]
    pub columns: Vec<crate::models::Column>,
    #[serde(rename = "tableConstraints", skip_serializing_if = "Option::is_none")]
    pub table_constraints: Option<Vec<crate::models::TableConstraint>>,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<crate::models::EntityReference>>,
    /// Unique id used to identify an entity.
    #[serde(rename = "database")]
    pub database: String,
    /// Tags for this table
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
    /// SQL query statement. Example - 'select * from orders'.
    #[serde(rename = "viewDefinition", skip_serializing_if = "Option::is_none")]
    pub view_definition: Option<String>,
}

impl CreateTable {
    pub fn new(name: String, columns: Vec<crate::models::Column>, database: String) -> CreateTable {
        CreateTable {
            name,
            description: None,
            table_type: None,
            columns,
            table_constraints: None,
            owner: None,
            database,
            tags: None,
            view_definition: None,
        }
    }
}

/// This schema defines the type used for describing different types of tables.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TableType {
    #[serde(rename = "Regular")]
    Regular,
    #[serde(rename = "External")]
    External,
    #[serde(rename = "View")]
    View,
    #[serde(rename = "SecureView")]
    SecureView,
    #[serde(rename = "MaterializedView")]
    MaterializedView,
}

impl Default for TableType {
    fn default() -> TableType {
        Self::Regular
    }
}
