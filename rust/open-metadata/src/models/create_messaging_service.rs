/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateMessagingService {
    /// Name that identifies the this entity instance uniquely
    #[serde(rename = "name")]
    pub name: String,
    /// Description of messaging service entity.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Type of messaging service - Kafka or Pulsar.
    #[serde(rename = "serviceType")]
    pub service_type: ServiceType,
    /// Multiple bootstrap addresses for Kafka. Single proxy address for Pulsar.
    #[serde(rename = "brokers")]
    pub brokers: Vec<String>,
    /// Schema registry URL
    #[serde(rename = "schemaRegistry", skip_serializing_if = "Option::is_none")]
    pub schema_registry: Option<String>,
    #[serde(rename = "ingestionSchedule", skip_serializing_if = "Option::is_none")]
    pub ingestion_schedule: Option<Box<crate::models::Schedule>>,
}

impl CreateMessagingService {
    pub fn new(
        name: String,
        service_type: ServiceType,
        brokers: Vec<String>,
    ) -> CreateMessagingService {
        CreateMessagingService {
            name,
            description: None,
            service_type,
            brokers,
            schema_registry: None,
            ingestion_schedule: None,
        }
    }
}

/// Type of messaging service - Kafka or Pulsar.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceType {
    #[serde(rename = "Kafka")]
    Kafka,
    #[serde(rename = "Pulsar")]
    Pulsar,
}

impl Default for ServiceType {
    fn default() -> ServiceType {
        Self::Kafka
    }
}
