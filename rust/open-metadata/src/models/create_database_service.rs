/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CreateDatabaseService {
    /// Name that identifies the this entity instance uniquely
    #[serde(rename = "name")]
    pub name: String,
    /// Description of Database entity.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
    #[serde(rename = "serviceType")]
    pub service_type: ServiceType,
    #[serde(rename = "jdbc")]
    pub jdbc: Box<crate::models::JdbcInfo>,
    #[serde(rename = "ingestionSchedule", skip_serializing_if = "Option::is_none")]
    pub ingestion_schedule: Option<Box<crate::models::Schedule>>,
}

impl CreateDatabaseService {
    pub fn new(
        name: String,
        service_type: ServiceType,
        jdbc: crate::models::JdbcInfo,
    ) -> CreateDatabaseService {
        CreateDatabaseService {
            name,
            description: None,
            service_type,
            jdbc: Box::new(jdbc),
            ingestion_schedule: None,
        }
    }
}

/// Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceType {
    #[serde(rename = "BigQuery")]
    BigQuery,
    #[serde(rename = "MySQL")]
    MySQL,
    #[serde(rename = "Redshift")]
    Redshift,
    #[serde(rename = "Snowflake")]
    Snowflake,
    #[serde(rename = "Postgres")]
    Postgres,
    #[serde(rename = "MSSQL")]
    MSSQL,
    #[serde(rename = "Oracle")]
    Oracle,
    #[serde(rename = "Athena")]
    Athena,
    #[serde(rename = "Hive")]
    Hive,
    #[serde(rename = "Presto")]
    Presto,
    #[serde(rename = "Trino")]
    Trino,
    #[serde(rename = "Vertica")]
    Vertica,
    #[serde(rename = "Glue")]
    Glue,
    #[serde(rename = "MariaDB")]
    MariaDB,
    #[serde(rename = "Druid")]
    Druid,
}

impl Default for ServiceType {
    fn default() -> ServiceType {
        Self::BigQuery
    }
}
