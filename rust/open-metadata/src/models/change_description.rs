/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct ChangeDescription {
    /// Names of fields added during the version changes.
    #[serde(rename = "fieldsAdded", skip_serializing_if = "Option::is_none")]
    pub fields_added: Option<Vec<crate::models::FieldChange>>,
    /// Fields modified during the version changes with old and new values.
    #[serde(rename = "fieldsUpdated", skip_serializing_if = "Option::is_none")]
    pub fields_updated: Option<Vec<crate::models::FieldChange>>,
    /// Fields deleted during the version changes with old value before deleted.
    #[serde(rename = "fieldsDeleted", skip_serializing_if = "Option::is_none")]
    pub fields_deleted: Option<Vec<crate::models::FieldChange>>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "previousVersion", skip_serializing_if = "Option::is_none")]
    pub previous_version: Option<f64>,
}

impl ChangeDescription {
    pub fn new() -> ChangeDescription {
        ChangeDescription {
            fields_added: None,
            fields_updated: None,
            fields_deleted: None,
            previous_version: None,
        }
    }
}
