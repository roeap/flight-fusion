/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct MlFeature {
    /// Local name (not fully qualified name) of the ML Feature.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// This enum defines the type of data stored in a ML Feature.
    #[serde(rename = "dataType", skip_serializing_if = "Option::is_none")]
    pub data_type: Option<DataType>,
    /// Description of the ML Feature.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Fully qualified name of the ML Feature that includes `modelName.featureName`.
    #[serde(rename = "fullyQualifiedName", skip_serializing_if = "Option::is_none")]
    pub fully_qualified_name: Option<String>,
    /// Columns used to create the ML Feature.
    #[serde(rename = "featureSources", skip_serializing_if = "Option::is_none")]
    pub feature_sources: Option<Vec<crate::models::MlFeatureSource>>,
    /// Description of the algorithm used to compute the feature, e.g., PCA, bucketing...
    #[serde(rename = "featureAlgorithm", skip_serializing_if = "Option::is_none")]
    pub feature_algorithm: Option<String>,
    /// Tags associated with the feature.
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::TagLabel>>,
}

impl MlFeature {
    pub fn new() -> MlFeature {
        MlFeature {
            name: None,
            data_type: None,
            description: None,
            fully_qualified_name: None,
            feature_sources: None,
            feature_algorithm: None,
            tags: None,
        }
    }
}

/// This enum defines the type of data stored in a ML Feature.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DataType {
    #[serde(rename = "Numerical")]
    Numerical,
    #[serde(rename = "Categorical")]
    Categorical,
}

impl Default for DataType {
    fn default() -> DataType {
        Self::Numerical
    }
}
