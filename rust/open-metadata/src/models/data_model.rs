/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct DataModel {
    #[serde(rename = "modelType")]
    pub model_type: ModelType,
    /// Description of the Table from the model.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Path to sql definition file.
    #[serde(rename = "path", skip_serializing_if = "Option::is_none")]
    pub path: Option<String>,
    /// SQL query statement. Example - 'select * from orders'.
    #[serde(rename = "rawSql", skip_serializing_if = "Option::is_none")]
    pub raw_sql: Option<String>,
    /// SQL query statement. Example - 'select * from orders'.
    #[serde(rename = "sql")]
    pub sql: String,
    /// Fully qualified name of Models/tables used for in `sql` for creating this table.
    #[serde(rename = "upstream", skip_serializing_if = "Option::is_none")]
    pub upstream: Option<Vec<String>>,
    /// Columns from the schema defined during modeling. In case of DBT, the metadata here comes from `schema.yaml`.
    #[serde(rename = "columns", skip_serializing_if = "Option::is_none")]
    pub columns: Option<Vec<crate::models::Column>>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "generatedAt", skip_serializing_if = "Option::is_none")]
    pub generated_at: Option<String>,
}

impl DataModel {
    pub fn new(model_type: ModelType, sql: String) -> DataModel {
        DataModel {
            model_type,
            description: None,
            path: None,
            raw_sql: None,
            sql,
            upstream: None,
            columns: None,
            generated_at: None,
        }
    }
}

///
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ModelType {
    #[serde(rename = "DBT")]
    DBT,
}

impl Default for ModelType {
    fn default() -> ModelType {
        Self::DBT
    }
}
