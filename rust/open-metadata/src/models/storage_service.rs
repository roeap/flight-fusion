/*
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct StorageService {
    /// Unique id used to identify an entity.
    #[serde(rename = "id")]
    pub id: String,
    /// Name that identifies this storage service.
    #[serde(rename = "name")]
    pub name: String,
    /// Display Name that identifies this storage service.
    #[serde(rename = "displayName", skip_serializing_if = "Option::is_none")]
    pub display_name: Option<String>,
    /// Type of storage service such as S3, GCS, HDFS...
    #[serde(rename = "serviceType")]
    pub service_type: ServiceType,
    /// Description of a storage service instance.
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<f64>,
    /// Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    /// User who made the update.
    #[serde(rename = "updatedBy", skip_serializing_if = "Option::is_none")]
    pub updated_by: Option<String>,
    /// URI that points to a resource.
    #[serde(rename = "href")]
    pub href: String,
    #[serde(rename = "changeDescription", skip_serializing_if = "Option::is_none")]
    pub change_description: Option<Box<crate::models::ChangeDescription>>,
}

impl StorageService {
    pub fn new(
        id: String,
        name: String,
        service_type: ServiceType,
        href: String,
    ) -> StorageService {
        StorageService {
            id,
            name,
            display_name: None,
            service_type,
            description: None,
            version: None,
            updated_at: None,
            updated_by: None,
            href,
            change_description: None,
        }
    }
}

/// Type of storage service such as S3, GCS, HDFS...
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ServiceType {
    #[serde(rename = "S3")]
    S3,
    #[serde(rename = "GCS")]
    GCS,
    #[serde(rename = "HDFS")]
    HDFS,
    #[serde(rename = "ABFS")]
    ABFS,
}

impl Default for ServiceType {
    fn default() -> ServiceType {
        Self::S3
    }
}
