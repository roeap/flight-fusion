swagger: '2.0'
info: {}
basePath: /api
tags:
  - name: All collections in the Catalog
  - name: Bots collection
  - name: Chart data asset collection
  - name: Get configuration
  - name: Dashboards collection
  - name: Databases collection
  - name: Tables collection
  - name: events
  - name: Feeds collection
  - name: Lineage resource
  - name: Locations collection
  - name: Metrics collection
  - name: MlModels collection
  - name: Ingestion collection
  - name: Pipelines collection
  - name: Policies collection
  - name: Reports collection
  - name: Search collection
  - name: Services collection
  - name: Services -> Dashboard service collection
  - name: Services -> Database service collection
  - name: Services -> Messaging service collection
  - name: Services -> Pipeline service collection
  - name: Services -> Storage service collection
  - name: Tags resources collection
  - name: Teams collection
  - name: User collection
  - name: Topic data asset collection
  - name: Usage resource
  - name: Catalog version related operations
schemes:
  - http
paths:
  /v1:
    get:
      tags:
        - All collections in the Catalog
      operationId: getCollections
      consumes:
        - application/json
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/CollectionList'
  /v1/bots/{id}:
    get:
      tags:
        - Bots collection
      operationId: get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Bots'
  /v1/bots:
    get:
      tags:
        - Bots collection
      operationId: list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListBots'
    post:
      tags:
        - Bots collection
      operationId: create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Bots'
      responses:
        default:
          description: successful operation
  /v1/charts/{id}:
    get:
      tags:
        - Chart data asset collection
      operationId: get_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Chart'
    delete:
      tags:
        - Chart data asset collection
      operationId: delete
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Chart data asset collection
      operationId: updateDescription
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/charts:
    get:
      tags:
        - Chart data asset collection
      operationId: list_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: service
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListChart'
    post:
      tags:
        - Chart data asset collection
      operationId: create_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateChart'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Chart data asset collection
      operationId: createOrUpdate
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateChart'
      responses:
        default:
          description: successful operation
  /v1/charts/name/{fqn}:
    get:
      tags:
        - Chart data asset collection
      operationId: getByName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        default:
          description: successful operation
  /v1/charts/{id}/versions/{version}:
    get:
      tags:
        - Chart data asset collection
      operationId: getVersion
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Chart'
  /v1/charts/{id}/versions:
    get:
      tags:
        - Chart data asset collection
      operationId: listVersions
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/charts/{id}/followers:
    put:
      tags:
        - Chart data asset collection
      operationId: addFollower
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /v1/charts/{id}/followers/{userId}:
    delete:
      tags:
        - Chart data asset collection
      operationId: deleteFollower
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/config/auth:
    get:
      tags:
        - Get configuration
      operationId: getAuthConfig
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/AuthenticationConfiguration'
  /v1/dashboards/{id}:
    get:
      tags:
        - Dashboards collection
      operationId: get_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Dashboard'
    delete:
      tags:
        - Dashboards collection
      operationId: delete_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Dashboards collection
      operationId: updateDescription_1
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/dashboards:
    get:
      tags:
        - Dashboards collection
      operationId: list_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: service
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListDashboard'
    post:
      tags:
        - Dashboards collection
      operationId: create_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDashboard'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Dashboards collection
      operationId: createOrUpdate_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDashboard'
      responses:
        default:
          description: successful operation
  /v1/dashboards/name/{fqn}:
    get:
      tags:
        - Dashboards collection
      operationId: getByName_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Dashboard'
  /v1/dashboards/{id}/versions/{version}:
    get:
      tags:
        - Dashboards collection
      operationId: getVersion_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Dashboard'
  /v1/dashboards/{id}/versions:
    get:
      tags:
        - Dashboards collection
      operationId: listVersions_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/dashboards/{id}/followers:
    put:
      tags:
        - Dashboards collection
      operationId: addFollower_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /v1/dashboards/{id}/followers/{userId}:
    delete:
      tags:
        - Dashboards collection
      operationId: deleteFollower_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/databases/{id}:
    get:
      tags:
        - Databases collection
      operationId: get_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - Databases collection
      operationId: delete_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Databases collection
      operationId: updateDescription_2
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/databases:
    get:
      tags:
        - Databases collection
      operationId: list_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: service
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListDatabase'
    post:
      tags:
        - Databases collection
      operationId: create_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDatabase'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Databases collection
      operationId: createOrUpdate_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDatabase'
      responses:
        default:
          description: successful operation
  /v1/databases/name/{fqn}:
    get:
      tags:
        - Databases collection
      operationId: getByName_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        default:
          description: successful operation
  /v1/databases/{id}/versions/{version}:
    get:
      tags:
        - Databases collection
      operationId: getVersion_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Database'
  /v1/databases/{id}/versions:
    get:
      tags:
        - Databases collection
      operationId: listVersions_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/databases/{id}/location:
    delete:
      tags:
        - Databases collection
      operationId: deleteLocation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Database'
  /v1/tables/{id}:
    get:
      tags:
        - Tables collection
      operationId: get_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
    delete:
      tags:
        - Tables collection
      operationId: delete_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Tables collection
      operationId: patch
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/tables:
    get:
      tags:
        - Tables collection
      operationId: list_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: database
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListTable'
    post:
      tags:
        - Tables collection
      operationId: create_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTable'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Tables collection
      operationId: createOrUpdate_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTable'
      responses:
        default:
          description: successful operation
  /v1/tables/name/{fqn}:
    get:
      tags:
        - Tables collection
      operationId: getByName_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/tables/{id}/versions/{version}:
    get:
      tags:
        - Tables collection
      operationId: getVersion_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/tables/{id}/versions:
    get:
      tags:
        - Tables collection
      operationId: listVersions_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/tables/{id}/followers:
    put:
      tags:
        - Tables collection
      operationId: addFollower_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /v1/tables/{id}/followers/{userId}:
    delete:
      tags:
        - Tables collection
      operationId: deleteFollower_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/tables/{id}/joins:
    put:
      tags:
        - Tables collection
      operationId: addJoins
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/TableJoins'
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/tables/{id}/sampleData:
    put:
      tags:
        - Tables collection
      operationId: addSampleData
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/TableData'
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/tables/{id}/location:
    put:
      tags:
        - Tables collection
      operationId: addLocation
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - Tables collection
      operationId: deleteLocation_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/tables/{id}/tableQuery:
    put:
      tags:
        - Tables collection
      operationId: addQuery
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/SQLQuery'
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/tables/{id}/dataModel:
    put:
      tags:
        - Tables collection
      operationId: addDataModel
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/DataModel'
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/tables/{id}/tableProfile:
    put:
      tags:
        - Tables collection
      operationId: addDataProfiler
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/TableProfile'
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Table'
  /v1/events:
    get:
      tags:
        - events
      operationId: get_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entityCreated
          in: query
          required: false
          type: string
        - name: entityUpdated
          in: query
          required: false
          type: string
        - name: entityDeleted
          in: query
          required: false
          type: string
        - name: date
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListChangeEvent'
  /v1/feed/{id}:
    get:
      tags:
        - Feeds collection
      operationId: get_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Thread'
  /v1/feed:
    get:
      tags:
        - Feeds collection
      operationId: list_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ThreadList'
    post:
      tags:
        - Feeds collection
      operationId: create_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateThread'
      responses:
        default:
          description: successful operation
  /v1/feed/{id}/posts:
    post:
      tags:
        - Feeds collection
      operationId: addPost
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Post'
      responses:
        default:
          description: successful operation
  /v1/lineage/{entity}/{id}:
    get:
      tags:
        - Lineage resource
      operationId: get_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: path
          required: true
          type: string
        - name: id
          in: path
          required: true
          type: string
        - name: upstreamDepth
          in: query
          required: false
          type: integer
          format: int32
        - name: downstreamDepth
          in: query
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityLineage'
  /v1/lineage/{entity}/name/{fqn}:
    get:
      tags:
        - Lineage resource
      operationId: getByName_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: path
          required: true
          type: string
        - name: fqn
          in: path
          required: true
          type: string
        - name: upstreamDepth
          in: query
          required: false
          type: integer
          default: 1
          maximum: 3
          minimum: 0
          format: int32
        - name: downstreamDepth
          in: query
          required: false
          type: integer
          default: 1
          maximum: 3
          minimum: 0
          format: int32
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityLineage'
  /v1/lineage:
    put:
      tags:
        - Lineage resource
      operationId: addLineage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/AddLineage'
      responses:
        default:
          description: successful operation
  /v1/locations/{id}:
    get:
      tags:
        - Locations collection
      operationId: get_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Location'
    delete:
      tags:
        - Locations collection
      operationId: delete_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Locations collection
      operationId: patch_1
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/locations:
    get:
      tags:
        - Locations collection
      operationId: list_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: service
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListLocation'
    post:
      tags:
        - Locations collection
      operationId: create_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateLocation'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Locations collection
      operationId: createOrUpdate_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateLocation'
      responses:
        default:
          description: successful operation
  /v1/locations/name/{fqn}:
    get:
      tags:
        - Locations collection
      operationId: getByName_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Location'
  /v1/locations/{id}/versions/{version}:
    get:
      tags:
        - Locations collection
      operationId: getVersion_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Location'
  /v1/locations/{id}/versions:
    get:
      tags:
        - Locations collection
      operationId: listVersions_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/locations/{id}/followers:
    put:
      tags:
        - Locations collection
      operationId: addFollower_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /v1/locations/{id}/followers/{userId}:
    delete:
      tags:
        - Locations collection
      operationId: deleteFollower_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/locations/prefixes/{fqn}:
    get:
      tags:
        - Locations collection
      operationId: listPrefixes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListLocation'
  /v1/metrics/{id}:
    get:
      tags:
        - Metrics collection
      operationId: get_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Metrics'
  /v1/metrics:
    get:
      tags:
        - Metrics collection
      operationId: list_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListMetrics'
    post:
      tags:
        - Metrics collection
      operationId: create_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Metrics'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Metrics collection
      operationId: createOrUpdate_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Metrics'
      responses:
        default:
          description: successful operation
  /v1/mlmodels/{id}:
    get:
      tags:
        - MlModels collection
      operationId: get_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/MlModel'
    delete:
      tags:
        - MlModels collection
      operationId: delete_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - MlModels collection
      operationId: patch_2
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/mlmodels:
    get:
      tags:
        - MlModels collection
      operationId: list_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListMlModel'
    post:
      tags:
        - MlModels collection
      operationId: create_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateMlModel'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - MlModels collection
      operationId: createOrUpdate_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateMlModel'
      responses:
        default:
          description: successful operation
  /v1/mlmodels/name/{fqn}:
    get:
      tags:
        - MlModels collection
      operationId: getByName_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/MlModel'
  /v1/mlmodels/{id}/versions/{version}:
    get:
      tags:
        - MlModels collection
      operationId: getVersion_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/MlModel'
  /v1/mlmodels/{id}/versions:
    get:
      tags:
        - MlModels collection
      operationId: listVersions_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/mlmodels/{id}/followers:
    put:
      tags:
        - MlModels collection
      operationId: addFollower_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /v1/mlmodels/{id}/followers/{userId}:
    delete:
      tags:
        - MlModels collection
      operationId: deleteFollower_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /operations/v1/ingestion/{id}:
    get:
      tags:
        - Ingestion collection
      operationId: get_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Ingestion'
    delete:
      tags:
        - Ingestion collection
      operationId: delete_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Ingestion collection
      operationId: updateDescription_3
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /operations/v1/ingestion:
    get:
      tags:
        - Ingestion collection
      operationId: list_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListIngestion'
    post:
      tags:
        - Ingestion collection
      operationId: create_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateIngestion'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Ingestion collection
      operationId: createOrUpdate_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateIngestion'
      responses:
        default:
          description: successful operation
  /operations/v1/ingestion/name/{fqn}:
    get:
      tags:
        - Ingestion collection
      operationId: getByName_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Ingestion'
  /operations/v1/ingestion/{id}/versions/{version}:
    get:
      tags:
        - Ingestion collection
      operationId: getVersion_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Ingestion'
  /operations/v1/ingestion/{id}/versions:
    get:
      tags:
        - Ingestion collection
      operationId: listVersions_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /operations/v1/ingestion/trigger/{id}:
    post:
      tags:
        - Ingestion collection
      operationId: triggerIngestion
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Ingestion'
  /v1/pipelines/{id}:
    get:
      tags:
        - Pipelines collection
      operationId: get_12
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Pipeline'
    delete:
      tags:
        - Pipelines collection
      operationId: delete_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Pipelines collection
      operationId: updateDescription_4
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/pipelines:
    get:
      tags:
        - Pipelines collection
      operationId: list_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: service
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListPipeline'
    post:
      tags:
        - Pipelines collection
      operationId: create_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreatePipeline'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Pipelines collection
      operationId: createOrUpdate_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreatePipeline'
      responses:
        default:
          description: successful operation
  /v1/pipelines/name/{fqn}:
    get:
      tags:
        - Pipelines collection
      operationId: getByName_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Pipeline'
  /v1/pipelines/{id}/versions/{version}:
    get:
      tags:
        - Pipelines collection
      operationId: getVersion_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Pipeline'
  /v1/pipelines/{id}/versions:
    get:
      tags:
        - Pipelines collection
      operationId: listVersions_7
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/pipelines/{id}/followers:
    put:
      tags:
        - Pipelines collection
      operationId: addFollower_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /v1/pipelines/{id}/followers/{userId}:
    delete:
      tags:
        - Pipelines collection
      operationId: deleteFollower_5
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/policies/{id}:
    get:
      tags:
        - Policies collection
      operationId: get_13
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Policy'
    delete:
      tags:
        - Policies collection
      operationId: delete_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Policies collection
      operationId: updateDescription_5
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/policies:
    get:
      tags:
        - Policies collection
      operationId: list_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListPolicy'
    post:
      tags:
        - Policies collection
      operationId: create_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreatePolicy'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Policies collection
      operationId: createOrUpdate_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreatePolicy'
      responses:
        default:
          description: successful operation
  /v1/policies/name/{fqn}:
    get:
      tags:
        - Policies collection
      operationId: getByName_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Policy'
  /v1/policies/{id}/versions/{version}:
    get:
      tags:
        - Policies collection
      operationId: getVersion_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Policy'
  /v1/policies/{id}/versions:
    get:
      tags:
        - Policies collection
      operationId: listVersions_8
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/reports/{id}:
    get:
      tags:
        - Reports collection
      operationId: get_14
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Report'
  /v1/reports:
    get:
      tags:
        - Reports collection
      operationId: list_12
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListReport'
    post:
      tags:
        - Reports collection
      operationId: create_12
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Report'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Reports collection
      operationId: createOrUpdate_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/Report'
      responses:
        default:
          description: successful operation
  /v1/search/query:
    get:
      tags:
        - Search collection
      operationId: search
      produces:
        - application/json
      parameters:
        - name: q
          in: query
          required: false
          type: string
        - name: index
          in: query
          required: false
          type: string
          default: table_search_index
        - name: from
          in: query
          required: false
          type: integer
          default: 0
          format: int32
        - name: size
          in: query
          required: false
          type: integer
          default: 10
          format: int32
        - name: sort_field
          in: query
          required: false
          type: string
        - name: sort_order
          in: query
          required: false
          type: string
          default: desc
      responses:
        default:
          description: successful operation
  /v1/search/suggest:
    get:
      tags:
        - Search collection
      operationId: suggest
      produces:
        - application/json
      parameters:
        - name: q
          in: query
          required: false
          type: string
        - name: index
          in: query
          required: false
          type: string
          default: table_search_index
      responses:
        default:
          description: successful operation
  /v1/services:
    get:
      tags:
        - Services collection
      operationId: getCollections_1
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/CollectionList'
  /v1/services/dashboardServices/{id}:
    get:
      tags:
        - Services -> Dashboard service collection
      operationId: get_15
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/DashboardService'
    delete:
      tags:
        - Services -> Dashboard service collection
      operationId: delete_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/services/dashboardServices:
    get:
      tags:
        - Services -> Dashboard service collection
      operationId: list_13
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListDashboardService'
    post:
      tags:
        - Services -> Dashboard service collection
      operationId: create_13
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDashboardService'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Services -> Dashboard service collection
      operationId: update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDashboardService'
      responses:
        default:
          description: successful operation
  /v1/services/dashboardServices/name/{name}:
    get:
      tags:
        - Services -> Dashboard service collection
      operationId: getByName_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/DashboardService'
  /v1/services/dashboardServices/{id}/versions/{version}:
    get:
      tags:
        - Services -> Dashboard service collection
      operationId: getVersion_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/DashboardService'
  /v1/services/dashboardServices/{id}/versions:
    get:
      tags:
        - Services -> Dashboard service collection
      operationId: listVersions_9
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/services/databaseServices/{id}:
    get:
      tags:
        - Services -> Database service collection
      operationId: get_16
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/DatabaseService'
    delete:
      tags:
        - Services -> Database service collection
      operationId: delete_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/services/databaseServices:
    get:
      tags:
        - Services -> Database service collection
      operationId: list_14
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListDatabaseService'
    post:
      tags:
        - Services -> Database service collection
      operationId: create_14
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDatabaseService'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Services -> Database service collection
      operationId: update_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateDatabaseService'
      responses:
        default:
          description: successful operation
  /v1/services/databaseServices/name/{name}:
    get:
      tags:
        - Services -> Database service collection
      operationId: getByName_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/DatabaseService'
  /v1/services/databaseServices/{id}/versions/{version}:
    get:
      tags:
        - Services -> Database service collection
      operationId: getVersion_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/DatabaseService'
  /v1/services/databaseServices/{id}/versions:
    get:
      tags:
        - Services -> Database service collection
      operationId: listVersions_10
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/services/messagingServices/{id}:
    get:
      tags:
        - Services -> Messaging service collection
      operationId: get_17
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/MessagingService'
    delete:
      tags:
        - Services -> Messaging service collection
      operationId: delete_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/services/messagingServices:
    get:
      tags:
        - Services -> Messaging service collection
      operationId: list_15
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListMessagingService'
    post:
      tags:
        - Services -> Messaging service collection
      operationId: create_15
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateMessagingService'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Services -> Messaging service collection
      operationId: update_2
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateMessagingService'
      responses:
        default:
          description: successful operation
  /v1/services/messagingServices/name/{name}:
    get:
      tags:
        - Services -> Messaging service collection
      operationId: getByName_12
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/MessagingService'
  /v1/services/messagingServices/{id}/versions/{version}:
    get:
      tags:
        - Services -> Messaging service collection
      operationId: getVersion_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/MessagingService'
  /v1/services/messagingServices/{id}/versions:
    get:
      tags:
        - Services -> Messaging service collection
      operationId: listVersions_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/services/pipelineServices/{id}:
    get:
      tags:
        - Services -> Pipeline service collection
      operationId: get_18
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/PipelineService'
    delete:
      tags:
        - Services -> Pipeline service collection
      operationId: delete_12
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/services/pipelineServices:
    get:
      tags:
        - Services -> Pipeline service collection
      operationId: list_16
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListPipelineService'
    post:
      tags:
        - Services -> Pipeline service collection
      operationId: create_16
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreatePipelineService'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Services -> Pipeline service collection
      operationId: update_3
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreatePipelineService'
      responses:
        default:
          description: successful operation
  /v1/services/pipelineServices/name/{name}:
    get:
      tags:
        - Services -> Pipeline service collection
      operationId: getByName_13
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/PipelineService'
  /v1/services/pipelineServices/{id}/versions/{version}:
    get:
      tags:
        - Services -> Pipeline service collection
      operationId: getVersion_12
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/PipelineService'
  /v1/services/pipelineServices/{id}/versions:
    get:
      tags:
        - Services -> Pipeline service collection
      operationId: listVersions_12
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/services/storageServices/{id}:
    get:
      tags:
        - Services -> Storage service collection
      operationId: get_19
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/StorageService'
    delete:
      tags:
        - Services -> Storage service collection
      operationId: delete_13
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/services/storageServices:
    get:
      tags:
        - Services -> Storage service collection
      operationId: list_17
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListStorageService'
    post:
      tags:
        - Services -> Storage service collection
      operationId: create_17
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateStorageService'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Services -> Storage service collection
      operationId: update_4
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateStorageService'
      responses:
        default:
          description: successful operation
  /v1/services/storageServices/name/{name}:
    get:
      tags:
        - Services -> Storage service collection
      operationId: getByName_14
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/StorageService'
  /v1/services/storageServices/{id}/versions/{version}:
    get:
      tags:
        - Services -> Storage service collection
      operationId: getVersion_13
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/StorageService'
  /v1/services/storageServices/{id}/versions:
    get:
      tags:
        - Services -> Storage service collection
      operationId: listVersions_13
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/tags/{category}:
    get:
      tags:
        - Tags resources collection
      operationId: getCategory
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/TagCategory'
    post:
      tags:
        - Tags resources collection
      operationId: createPrimaryTag
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTag'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Tags resources collection
      operationId: updateCategory
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTagCategory'
      responses:
        default:
          description: successful operation
  /v1/tags:
    get:
      tags:
        - Tags resources collection
      operationId: getCategories
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/CategoryList'
    post:
      tags:
        - Tags resources collection
      operationId: createCategory
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTagCategory'
      responses:
        default:
          description: successful operation
  /v1/tags/{category}/{primaryTag}:
    get:
      tags:
        - Tags resources collection
      summary: Returns tag groups under the given category.
      description: ''
      operationId: getPrimaryTag
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - name: primaryTag
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          schema:
            $ref: '#/definitions/Tag'
    post:
      tags:
        - Tags resources collection
      operationId: createSecondaryTag
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - name: primaryTag
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTag'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Tags resources collection
      operationId: updatePrimaryTag
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - name: primaryTag
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTag'
      responses:
        default:
          description: successful operation
  /v1/tags/{category}/{primaryTag}/{secondaryTag}:
    get:
      tags:
        - Tags resources collection
      operationId: getSecondaryTag
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - name: primaryTag
          in: path
          required: true
          type: string
        - name: secondaryTag
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Tag'
    put:
      tags:
        - Tags resources collection
      operationId: updateSecondaryTag
      produces:
        - application/json
      parameters:
        - name: category
          in: path
          required: true
          type: string
        - name: primaryTag
          in: path
          required: true
          type: string
        - name: secondaryTag
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTag'
      responses:
        default:
          description: successful operation
  /v1/teams/{id}:
    get:
      tags:
        - Teams collection
      operationId: get_20
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Team'
    delete:
      tags:
        - Teams collection
      operationId: delete_14
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Teams collection
      operationId: patch_3
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/teams:
    get:
      tags:
        - Teams collection
      operationId: list_18
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListTeam'
    post:
      tags:
        - Teams collection
      operationId: create_18
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTeam'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Teams collection
      operationId: createOrUpdateTeam
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTeam'
      responses:
        default:
          description: successful operation
  /v1/teams/name/{name}:
    get:
      tags:
        - Teams collection
      operationId: getByName_15
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Team'
  /v1/teams/{id}/versions/{version}:
    get:
      tags:
        - Teams collection
      operationId: getVersion_14
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Team'
  /v1/teams/{id}/versions:
    get:
      tags:
        - Teams collection
      operationId: listVersions_14
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/users/{id}:
    get:
      tags:
        - User collection
      operationId: get_21
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/User'
    delete:
      tags:
        - User collection
      operationId: delete_15
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - User collection
      operationId: patch_4
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/users:
    get:
      tags:
        - User collection
      operationId: list_19
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: team
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListUser'
    post:
      tags:
        - User collection
      operationId: createUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateUser'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - User collection
      operationId: createOrUpdateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateUser'
      responses:
        default:
          description: successful operation
  /v1/users/name/{name}:
    get:
      tags:
        - User collection
      operationId: getByName_16
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: name
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/User'
  /v1/users/{id}/versions/{version}:
    get:
      tags:
        - User collection
      operationId: getVersion_15
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/User'
  /v1/users/{id}/versions:
    get:
      tags:
        - User collection
      operationId: listVersions_15
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/users/loggedInUser:
    get:
      tags:
        - User collection
      operationId: getCurrentLoggedInUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/User'
  /v1/topics/{id}:
    get:
      tags:
        - Topic data asset collection
      operationId: get_22
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Topic'
    delete:
      tags:
        - Topic data asset collection
      operationId: delete_16
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
    patch:
      tags:
        - Topic data asset collection
      operationId: updateDescription_6
      consumes:
        - application/json-patch+json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/JsonPatch'
      responses:
        default:
          description: successful operation
  /v1/topics:
    get:
      tags:
        - Topic data asset collection
      operationId: list_20
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fields
          in: query
          required: false
          type: string
        - name: service
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: integer
          default: 10
          maximum: 1000000
          minimum: 1
          format: int32
        - name: before
          in: query
          required: false
          type: string
        - name: after
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/ResultListTopic'
    post:
      tags:
        - Topic data asset collection
      operationId: create_19
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTopic'
      responses:
        default:
          description: successful operation
    put:
      tags:
        - Topic data asset collection
      operationId: createOrUpdate_11
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/CreateTopic'
      responses:
        default:
          description: successful operation
  /v1/topics/name/{fqn}:
    get:
      tags:
        - Topic data asset collection
      operationId: getByName_17
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: fqn
          in: path
          required: true
          type: string
        - name: fields
          in: query
          required: false
          type: string
      responses:
        default:
          description: successful operation
  /v1/topics/{id}/versions/{version}:
    get:
      tags:
        - Topic data asset collection
      operationId: getVersion_16
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: version
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/Topic'
  /v1/topics/{id}/versions:
    get:
      tags:
        - Topic data asset collection
      operationId: listVersions_16
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityHistory'
  /v1/topics/{id}/followers:
    put:
      tags:
        - Topic data asset collection
      operationId: addFollower_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            type: string
      responses:
        default:
          description: successful operation
  /v1/topics/{id}/followers/{userId}:
    delete:
      tags:
        - Topic data asset collection
      operationId: deleteFollower_6
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: string
        - name: userId
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/usage/{entity}/{id}:
    get:
      tags:
        - Usage resource
      operationId: get_23
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: path
          required: true
          type: string
        - name: id
          in: path
          required: true
          type: string
        - name: days
          in: query
          required: false
          type: integer
          format: int32
        - name: date
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityUsage'
    post:
      tags:
        - Usage resource
      operationId: create_20
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: path
          required: true
          type: string
        - name: id
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/DailyCount'
      responses:
        default:
          description: successful operation
  /v1/usage/{entity}/name/{fqn}:
    get:
      tags:
        - Usage resource
      operationId: getByName_18
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: path
          required: true
          type: string
        - name: fqn
          in: path
          required: true
          type: string
        - name: days
          in: query
          required: false
          type: integer
          format: int32
        - name: date
          in: query
          required: false
          type: string
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/EntityUsage'
    post:
      tags:
        - Usage resource
      operationId: createByName
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: path
          required: true
          type: string
        - name: fqn
          in: path
          required: true
          type: string
        - in: body
          name: body
          required: false
          schema:
            $ref: '#/definitions/DailyCount'
      responses:
        default:
          description: successful operation
  /v1/usage/compute.percentile/{entity}/{date}:
    post:
      tags:
        - Usage resource
      operationId: computePercentile
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: entity
          in: path
          required: true
          type: string
        - name: date
          in: path
          required: true
          type: string
      responses:
        default:
          description: successful operation
  /v1/version:
    get:
      tags:
        - Catalog version related operations
      operationId: getCatalogVersion
      produces:
        - application/json
      parameters: []
      responses:
        '200':
          description: successful operation
          headers: {}
          schema:
            $ref: '#/definitions/CatalogVersion'
definitions:
  CollectionDescriptor:
    type: object
    properties:
      collection:
        description: Collection Info.
        $ref: '#/definitions/CollectionInfo'
  CollectionInfo:
    type: object
    properties:
      name:
        type: string
        description: Unique name that identifies a collection.
      documentation:
        type: string
        description: Description of collection.
      href:
        type: string
        format: uri
        description: URL of the API endpoint where given collections are available.
      images:
        description: Links to a list of images of varying resolutions/sizes.
        $ref: '#/definitions/ImageList'
  CollectionList:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/CollectionDescriptor'
      paging:
        $ref: '#/definitions/Paging'
  ImageList:
    type: object
    properties:
      image:
        type: string
        format: uri
      image24:
        type: string
        format: uri
      image32:
        type: string
        format: uri
      image48:
        type: string
        format: uri
      image72:
        type: string
        format: uri
      image192:
        type: string
        format: uri
      image512:
        type: string
        format: uri
  Paging:
    type: object
    required:
      - total
    properties:
      before:
        type: string
        description: Before cursor used for getting the previous page (see API pagination for details).
      after:
        type: string
        description: After cursor used for getting the next page (see API pagination for details).
      total:
        type: integer
        format: int32
        description: Total number of entries available to page through.
  Bots:
    type: object
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name of the bot.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Name used for display purposes. Example 'FirstName LastName'.
      description:
        type: string
        description: Description of the bot.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ChangeDescription:
    type: object
    properties:
      fieldsAdded:
        type: array
        description: Names of fields added during the version changes.
        items:
          $ref: '#/definitions/FieldChange'
      fieldsUpdated:
        type: array
        description: Fields modified during the version changes with old and new values.
        items:
          $ref: '#/definitions/FieldChange'
      fieldsDeleted:
        type: array
        description: Fields deleted during the version changes with old value before deleted.
        items:
          $ref: '#/definitions/FieldChange'
      previousVersion:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
  FieldChange:
    type: object
    properties:
      name:
        type: string
        description: Name of the field of an entity.
      oldValue:
        type: object
        description: Previous value of the field. Note that this is a JSON string and use the corresponding field type to deserialize it.
      newValue:
        type: object
        description: New value of the field. Note that this is a JSON string and use the corresponding field type to deserialize it.
  ResultList:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          type: object
      paging:
        $ref: '#/definitions/Paging'
  ResultListBots:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Bots'
      paging:
        $ref: '#/definitions/Paging'
  Chart:
    type: object
    required:
      - id
      - name
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this Chart.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Chart. It could be title or label from the source services.
      fullyQualifiedName:
        type: string
        description: A unique name that identifies a dashboard in the format 'ServiceName.ChartName'.
        minLength: 1
        maxLength: 256
      description:
        type: string
        description: Description of the dashboard, what it is, and how to use it.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      chartType:
        type: string
        description: This schema defines the type used for describing different types of charts.
        enum:
          - Line
          - Table
          - Bar
          - Area
          - Pie
          - Histogram
          - Scatter
          - Text
          - BoxPlot
          - Other
      chartUrl:
        type: string
        format: uri
        description: Chart URL, pointing to its own Service URL.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      tables:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      followers:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this chart.
        items:
          $ref: '#/definitions/TagLabel'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      serviceType:
        type: string
        description: Type of Dashboard service - Superset, Looker, Redash or Tableau.
        enum:
          - Superset
          - Looker
          - Tableau
          - Redash
          - Metabase
      usageSummary:
        description: This schema defines the type for usage details. Daily, weekly, and monthly aggregation of usage is computed along with the percentile rank based on the usage for a given day.
        $ref: '#/definitions/UsageDetails'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  EntityReference:
    type: object
    required:
      - id
      - type
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      type:
        type: string
        description: 'Entity type/class name - Examples: `database`, `table`, `metrics`, `databaseService`, `dashboardService`...'
      name:
        type: string
        description: Name of the entity instance. For entities such as tables, databases where the name is not unique, fullyQualifiedName is returned in this field.
      description:
        type: string
        description: Optional description of entity.
      displayName:
        type: string
        description: Display Name that identifies this entity.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
  TagLabel:
    type: object
    required:
      - labelType
      - state
      - tagFQN
    properties:
      tagFQN:
        type: string
        minLength: 0
        maxLength: 45
      description:
        type: string
        description: Unique name of the tag category.
      labelType:
        type: string
        description: Label type describes how a tag label was applied. 'Manual' indicates the tag label was applied by a person. 'Derived' indicates a tag label was derived using the associated tag relationship (see TagCategory.json for more details). 'Propagated` indicates a tag label was propagated from upstream based on lineage. 'Automated' is used when a tool was used to determine the tag label.
        enum:
          - MANUAL
          - PROPAGATED
          - AUTOMATED
          - DERIVED
      state:
        type: string
        description: '''Suggested'' state is used when a tag label is suggested by users or tools. Owner of the entity must confirm the suggested labels before it is marked as ''Confirmed''.'
        enum:
          - SUGGESTED
          - CONFIRMED
      href:
        type: string
        format: uri
        description: URI that points to a resource.
  UsageDetails:
    type: object
    required:
      - dailyStats
      - date
    properties:
      dailyStats:
        description: Type used to return usage statistics.
        $ref: '#/definitions/UsageStats'
      weeklyStats:
        description: Type used to return usage statistics.
        $ref: '#/definitions/UsageStats'
      monthlyStats:
        description: Type used to return usage statistics.
        $ref: '#/definitions/UsageStats'
      date:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
  UsageStats:
    type: object
    required:
      - count
    properties:
      count:
        type: integer
        format: int32
        description: Usage count of a data asset on the start date.
        minimum: 0
        exclusiveMinimum: false
      percentileRank:
        type: number
        format: double
        description: Optional daily percentile rank data asset use when relevant.
  ResultListChart:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Chart'
      paging:
        $ref: '#/definitions/Paging'
  CreateChart:
    type: object
    required:
      - name
      - service
    properties:
      name:
        type: string
        description: Name that identifies this Chart.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Chart. It could be title or label from the source services
      description:
        type: string
        description: Description of the chart instance. What it has and how to use it.
      chartType:
        type: string
        description: This schema defines the type used for describing different types of charts.
        enum:
          - Line
          - Table
          - Bar
          - Area
          - Pie
          - Histogram
          - Scatter
          - Text
          - BoxPlot
          - Other
      chartUrl:
        type: string
        format: uri
        description: Chart URL, pointing to its own Service URL
      tables:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this chart
        items:
          $ref: '#/definitions/TagLabel'
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
  EntityHistory:
    type: object
    required:
      - entityType
      - versions
    properties:
      entityType:
        type: string
        description: Entity type, such as `database`, `table`, `dashboard`, for which this version history is produced.
      versions:
        type: array
        items:
          type: object
  JsonPatch:
    type: object
  AuthenticationConfiguration:
    type: object
    properties:
      provider:
        type: string
      publicKey:
        type: string
      authority:
        type: string
      clientId:
        type: string
      callbackUrl:
        type: string
  Dashboard:
    type: object
    required:
      - id
      - name
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this dashboard.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Dashboard. It could be title or label from the source services.
      fullyQualifiedName:
        type: string
        description: A unique name that identifies a dashboard in the format 'ServiceName.DashboardName'.
        minLength: 1
        maxLength: 256
      description:
        type: string
        description: Description of the dashboard, what it is, and how to use it.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      dashboardUrl:
        type: string
        format: uri
        description: Dashboard URL.
      charts:
        type: array
        description: All the charts included in this Dashboard.
        items:
          $ref: '#/definitions/EntityReference'
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      followers:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this dashboard.
        items:
          $ref: '#/definitions/TagLabel'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      serviceType:
        type: string
        description: Type of Dashboard service - Superset, Looker, Redash or Tableau.
        enum:
          - Superset
          - Looker
          - Tableau
          - Redash
          - Metabase
      usageSummary:
        description: This schema defines the type for usage details. Daily, weekly, and monthly aggregation of usage is computed along with the percentile rank based on the usage for a given day.
        $ref: '#/definitions/UsageDetails'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListDashboard:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Dashboard'
      paging:
        $ref: '#/definitions/Paging'
  CreateDashboard:
    type: object
    required:
      - name
      - service
    properties:
      name:
        type: string
        description: Name that identifies this dashboard.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Dashboard. It could be title or label from the source services
      description:
        type: string
        description: Description of the database instance. What it has and how to use it.
      dashboardUrl:
        type: string
        format: uri
        description: Dashboard URL
      charts:
        type: array
        description: All the charts included in this Dashboard.
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this chart
        items:
          $ref: '#/definitions/TagLabel'
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
  Database:
    type: object
    required:
      - name
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies the database.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      fullyQualifiedName:
        type: string
        description: Name that uniquely identifies a database in the format 'ServiceName.DatabaseName'.
      displayName:
        type: string
        description: Display Name that identifies this database.
      description:
        type: string
        description: Description of the database instance.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      serviceType:
        type: string
        description: Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
        enum:
          - BigQuery
          - MySQL
          - Redshift
          - Snowflake
          - Postgres
          - MSSQL
          - Oracle
          - Athena
          - Hive
          - Presto
          - Trino
          - Vertica
          - Glue
          - MariaDB
          - Druid
      location:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      usageSummary:
        description: This schema defines the type for usage details. Daily, weekly, and monthly aggregation of usage is computed along with the percentile rank based on the usage for a given day.
        $ref: '#/definitions/UsageDetails'
      tables:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListDatabase:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Database'
      paging:
        $ref: '#/definitions/Paging'
  CreateDatabase:
    type: object
    required:
      - name
      - service
    properties:
      name:
        type: string
        description: Name that identifies the database.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      description:
        type: string
        description: Description of the database instance. What it has and how to use it.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
  Column:
    type: object
    required:
      - dataType
      - name
    properties:
      name:
        type: string
        description: Local name (not fully qualified name) of the column. ColumnName is `-` when the column is not named in struct dataType. For example, BigQuery supports struct with unnamed fields.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      dataType:
        type: string
        description: This enum defines the type of data stored in a column.
        enum:
          - NUMBER
          - TINYINT
          - SMALLINT
          - INT
          - BIGINT
          - BYTEINT
          - BYTES
          - FLOAT
          - DOUBLE
          - DECIMAL
          - NUMERIC
          - TIMESTAMP
          - TIME
          - DATE
          - DATETIME
          - INTERVAL
          - STRING
          - MEDIUMTEXT
          - TEXT
          - CHAR
          - VARCHAR
          - BOOLEAN
          - BINARY
          - VARBINARY
          - ARRAY
          - BLOB
          - LONGBLOB
          - MEDIUMBLOB
          - MAP
          - STRUCT
          - UNION
          - SET
          - GEOGRAPHY
          - ENUM
          - JSON
      arrayDataType:
        type: string
        description: This enum defines the type of data stored in a column.
        enum:
          - NUMBER
          - TINYINT
          - SMALLINT
          - INT
          - BIGINT
          - BYTEINT
          - BYTES
          - FLOAT
          - DOUBLE
          - DECIMAL
          - NUMERIC
          - TIMESTAMP
          - TIME
          - DATE
          - DATETIME
          - INTERVAL
          - STRING
          - MEDIUMTEXT
          - TEXT
          - CHAR
          - VARCHAR
          - BOOLEAN
          - BINARY
          - VARBINARY
          - ARRAY
          - BLOB
          - LONGBLOB
          - MEDIUMBLOB
          - MAP
          - STRUCT
          - UNION
          - SET
          - GEOGRAPHY
          - ENUM
          - JSON
      dataLength:
        type: integer
        format: int32
        description: Length of `char`, `varchar`, `binary`, `varbinary` `dataTypes`, else null. For example, `varchar(20)` has dataType as `varchar` and dataLength as `20`.
      dataTypeDisplay:
        type: string
        description: Display name used for dataType. This is useful for complex types, such as `array<int>, map<int,string>, struct<>, and union types.
      description:
        type: string
        description: Description of the column.
      fullyQualifiedName:
        type: string
        description: Fully qualified name of the column that includes `serviceName.databaseName.tableName.columnName[.nestedColumnName]`. When columnName is null for dataType struct fields, `field_#` where `#` is field index is used. For map dataType, for key the field name `key` is used and for the value field `value` is used.
        minLength: 1
        maxLength: 256
      tags:
        type: array
        description: Tags associated with the column.
        items:
          $ref: '#/definitions/TagLabel'
      constraint:
        type: string
        description: This enum defines the type for column constraint.
        enum:
          - 'NULL'
          - NOT_NULL
          - UNIQUE
          - PRIMARY_KEY
      ordinalPosition:
        type: integer
        format: int32
        description: Ordinal position of the column.
      jsonSchema:
        type: string
        description: Json schema only if the dataType is JSON else null.
      children:
        type: array
        description: Child columns if dataType or arrayDataType is `map`, `struct`, or `union` else `null`.
        items:
          $ref: '#/definitions/Column'
  ColumnJoin:
    type: object
    properties:
      columnName:
        type: string
        description: Local name (not fully qualified name) of the column. ColumnName is `-` when the column is not named in struct dataType. For example, BigQuery supports struct with unnamed fields.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      joinedWith:
        type: array
        description: Fully qualified names of the columns that this column is joined with.
        items:
          $ref: '#/definitions/JoinedWith'
  ColumnProfile:
    type: object
    properties:
      name:
        type: string
        description: Column Name.
      uniqueCount:
        type: number
        format: double
        description: No. of unique values in the column.
      uniqueProportion:
        type: number
        format: double
        description: Proportion of number of unique values in a column.
      nullCount:
        type: number
        format: double
        description: No.of null values in a column.
      nullProportion:
        type: number
        format: double
        description: No.of null value proportion in columns.
      min:
        type: string
        description: Minimum value in a column.
      max:
        type: string
        description: Maximum value in a column.
      mean:
        type: string
        description: Avg value in a column.
      median:
        type: string
        description: Median value in a column.
      stddev:
        type: number
        format: double
        description: Standard deviation of a column.
  DataModel:
    type: object
    required:
      - modelType
      - sql
    properties:
      modelType:
        type: string
        enum:
          - DBT
      description:
        type: string
        description: Description of the Table from the model.
      path:
        type: string
        description: Path to sql definition file.
      rawSql:
        type: string
        description: SQL query statement. Example - 'select * from orders'.
      sql:
        type: string
        description: SQL query statement. Example - 'select * from orders'.
      upstream:
        type: array
        description: Fully qualified name of Models/tables used for in `sql` for creating this table.
        items:
          type: string
      columns:
        type: array
        description: Columns from the schema defined during modeling. In case of DBT, the metadata here comes from `schema.yaml`.
        items:
          $ref: '#/definitions/Column'
      generatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
  JoinedWith:
    type: object
    properties:
      fullyQualifiedName:
        type: string
        description: Fully qualified name of the column that includes `serviceName.databaseName.tableName.columnName[.nestedColumnName]`. When columnName is null for dataType struct fields, `field_#` where `#` is field index is used. For map dataType, for key the field name `key` is used and for the value field `value` is used.
        minLength: 1
        maxLength: 256
      joinCount:
        type: integer
        format: int32
  SQLQuery:
    type: object
    properties:
      query:
        type: string
        description: SQL Query text that matches the table name.
      duration:
        type: number
        format: double
        description: How long did the query took to run in seconds.
      user:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      vote:
        type: number
        format: double
        description: Users can vote up to rank the popular queries.
      checksum:
        type: string
        description: Checksum to avoid registering duplicate queries.
      queryDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
  Table:
    type: object
    required:
      - columns
      - id
      - name
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Local name (not fully qualified name) of a table.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      displayName:
        type: string
        description: Display Name that identifies this table. It could be title or label from the source services.
      fullyQualifiedName:
        type: string
        description: Fully qualified name of a table in the form `serviceName.databaseName.tableName`.
      description:
        type: string
        description: Description of a table.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      tableType:
        type: string
        description: This schema defines the type used for describing different types of tables.
        enum:
          - Regular
          - External
          - View
          - SecureView
          - MaterializedView
      columns:
        type: array
        description: Columns in this table.
        items:
          $ref: '#/definitions/Column'
      tableConstraints:
        type: array
        description: Table constraints.
        items:
          $ref: '#/definitions/TableConstraint'
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      database:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      serviceType:
        type: string
        description: Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
        enum:
          - BigQuery
          - MySQL
          - Redshift
          - Snowflake
          - Postgres
          - MSSQL
          - Oracle
          - Athena
          - Hive
          - Presto
          - Trino
          - Vertica
          - Glue
          - MariaDB
          - Druid
      location:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      viewDefinition:
        type: string
        description: SQL query statement. Example - 'select * from orders'.
      tags:
        type: array
        description: Tags for this table.
        items:
          $ref: '#/definitions/TagLabel'
      usageSummary:
        description: This schema defines the type for usage details. Daily, weekly, and monthly aggregation of usage is computed along with the percentile rank based on the usage for a given day.
        $ref: '#/definitions/UsageDetails'
      followers:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      joins:
        description: This schema defines the type to capture information about how columns in this table are joined with columns in the other tables.
        $ref: '#/definitions/TableJoins'
      sampleData:
        description: This schema defines the type to capture rows of sample data for a table.
        $ref: '#/definitions/TableData'
      tableProfile:
        type: array
        description: Data profile for a table.
        items:
          $ref: '#/definitions/TableProfile'
      tableQueries:
        type: array
        description: List of queries that ran against a table.
        items:
          $ref: '#/definitions/SQLQuery'
      dataModel:
        description: This captures information about how the table is modeled. Currently only DBT model is supported.
        $ref: '#/definitions/DataModel'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  TableConstraint:
    type: object
    properties:
      constraintType:
        type: string
        enum:
          - UNIQUE
          - PRIMARY_KEY
          - FOREIGN_KEY
      columns:
        type: array
        description: List of column names corresponding to the constraint.
        items:
          type: string
  TableData:
    type: object
    properties:
      columns:
        type: array
        description: List of local column names (not fully qualified column names) of the table.
        items:
          type: string
      rows:
        type: array
        description: Data for multiple rows of the table.
        items:
          type: array
          items:
            type: object
  TableJoins:
    type: object
    properties:
      startDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
      dayCount:
        type: integer
        format: int32
      columnJoins:
        type: array
        items:
          $ref: '#/definitions/ColumnJoin'
  TableProfile:
    type: object
    properties:
      profileDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
      columnCount:
        type: number
        format: double
        description: No.of columns in the table.
      rowCount:
        type: number
        format: double
        description: No.of rows in the table.
      columnProfile:
        type: array
        description: List of local column profiles of the table.
        items:
          $ref: '#/definitions/ColumnProfile'
  ResultListTable:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Table'
      paging:
        $ref: '#/definitions/Paging'
  CreateTable:
    type: object
    required:
      - columns
      - database
      - name
    properties:
      name:
        type: string
        description: Local name (not fully qualified name) of a table.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      description:
        type: string
        description: Description of entity instance.
      tableType:
        type: string
        description: This schema defines the type used for describing different types of tables.
        enum:
          - Regular
          - External
          - View
          - SecureView
          - MaterializedView
      columns:
        type: array
        description: Name of the tables in the database
        items:
          $ref: '#/definitions/Column'
      tableConstraints:
        type: array
        items:
          $ref: '#/definitions/TableConstraint'
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      database:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      tags:
        type: array
        description: Tags for this table
        items:
          $ref: '#/definitions/TagLabel'
      viewDefinition:
        type: string
        description: SQL query statement. Example - 'select * from orders'.
  ChangeEvent:
    type: object
    required:
      - dateTime
      - entityId
      - entityType
      - eventType
    properties:
      eventType:
        type: string
        description: Type of event.
        enum:
          - ENTITY_CREATED
          - ENTITY_UPDATED
          - ENTITY_DELETED
      entityType:
        type: string
        description: Entity type that changed. Use the schema of this entity to process the entity attribute.
      entityId:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      previousVersion:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      currentVersion:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      userName:
        type: string
        description: Name of the user whose activity resulted in the change.
      dateTime:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
      entity:
        type: object
        description: For `eventType` `entityCreated`, this field captures JSON coded string of the entity using the schema corresponding to `entityType`.
  ResultListChangeEvent:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/ChangeEvent'
      paging:
        $ref: '#/definitions/Paging'
  Post:
    type: object
    required:
      - from
      - message
    properties:
      message:
        type: string
        description: Message in markdown format. See markdown support for more details.
      postTs:
        type: string
        format: date-time
        description: Timestamp of the post.
      from:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
  Thread:
    type: object
    required:
      - about
      - id
      - posts
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      threadTs:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      about:
        type: string
        description: Link to an entity or field within an entity using this format `<#E/{enties}/{entityName}/{field}/{fieldValue}`.
        pattern: ^<#E/\S+/\S+>$
      addressedTo:
        type: string
        description: Link to an entity or field within an entity using this format `<#E/{enties}/{entityName}/{field}/{fieldValue}`.
        pattern: ^<#E/\S+/\S+>$
      posts:
        type: array
        items:
          $ref: '#/definitions/Post'
  ThreadList:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Thread'
      paging:
        $ref: '#/definitions/Paging'
  CreateThread:
    type: object
    required:
      - about
      - from
      - message
    properties:
      message:
        type: string
        description: Message
      from:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      about:
        type: string
        description: Link to an entity or field within an entity using this format `<#E/{enties}/{entityName}/{field}/{fieldValue}`.
        pattern: ^<#E/\S+/\S+>$
  Edge:
    type: object
    properties:
      fromEntity:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      toEntity:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      description:
        type: string
  EntityLineage:
    type: object
    required:
      - entity
    properties:
      entity:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      nodes:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      upstreamEdges:
        type: array
        items:
          $ref: '#/definitions/Edge'
      downstreamEdges:
        type: array
        items:
          $ref: '#/definitions/Edge'
  AddLineage:
    type: object
    required:
      - edge
    properties:
      description:
        type: string
        description: User provided description of the lineage details.
      edge:
        description: Edge in the lineage graph from one entity to another using entity references.
        $ref: '#/definitions/EntitiesEdge'
  EntitiesEdge:
    type: object
    properties:
      fromEntity:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      toEntity:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      description:
        type: string
  Location:
    type: object
    required:
      - name
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Local name (not fully qualified name) of a location.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this table. It could be title or label from the source services.
      fullyQualifiedName:
        type: string
        description: Fully qualified name of a location in the form `serviceName.locationName`.
      description:
        type: string
        description: Description of a location.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      locationType:
        type: string
        description: This schema defines the type used for describing different types of Location.
        enum:
          - Bucket
          - Prefix
          - Database
          - Table
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      followers:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this location.
        items:
          $ref: '#/definitions/TagLabel'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      serviceType:
        type: string
        description: Type of storage service such as S3, GCS, HDFS...
        enum:
          - S3
          - GCS
          - HDFS
          - ABFS
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListLocation:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Location'
      paging:
        $ref: '#/definitions/Paging'
  CreateLocation:
    type: object
    required:
      - name
      - service
    properties:
      name:
        type: string
        description: Local name (not fully qualified name) of a location.
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Description of the location instance.
      locationType:
        type: string
        description: This schema defines the type used for describing different types of Location.
        enum:
          - Bucket
          - Prefix
          - Database
          - Table
      tags:
        type: array
        description: Tags for this location
        items:
          $ref: '#/definitions/TagLabel'
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
  Metrics:
    type: object
    required:
      - id
      - name
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this metrics instance uniquely.
        minLength: 1
        maxLength: 128
      fullyQualifiedName:
        type: string
        description: A unique name that identifies a metric in the format 'ServiceName.MetricName'.
        minLength: 1
        maxLength: 256
      displayName:
        type: string
        description: Display Name that identifies this metric.
      description:
        type: string
        description: Description of metrics instance, what it is, and how to use it.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this chart.
        items:
          $ref: '#/definitions/TagLabel'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      usageSummary:
        description: This schema defines the type for usage details. Daily, weekly, and monthly aggregation of usage is computed along with the percentile rank based on the usage for a given day.
        $ref: '#/definitions/UsageDetails'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListMetrics:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Metrics'
      paging:
        $ref: '#/definitions/Paging'
  MlFeature:
    type: object
    properties:
      name:
        type: string
        description: Local name (not fully qualified name) of the ML Feature.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      dataType:
        type: string
        description: This enum defines the type of data stored in a ML Feature.
        enum:
          - Numerical
          - Categorical
      description:
        type: string
        description: Description of the ML Feature.
      fullyQualifiedName:
        type: string
        description: Fully qualified name of the ML Feature that includes `modelName.featureName`.
        minLength: 1
        maxLength: 256
      featureSources:
        type: array
        description: Columns used to create the ML Feature.
        items:
          $ref: '#/definitions/MlFeatureSource'
      featureAlgorithm:
        type: string
        description: Description of the algorithm used to compute the feature, e.g., PCA, bucketing...
      tags:
        type: array
        description: Tags associated with the feature.
        items:
          $ref: '#/definitions/TagLabel'
  MlFeatureSource:
    type: object
    properties:
      name:
        type: string
        description: Local name (not fully qualified name) of a ML Feature source.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      dataType:
        type: string
        description: This enum defines the type of data of a ML Feature source.
        enum:
          - INTEGER
          - NUMBER
          - STRING
          - ARRAY
          - DATE
          - TIMESTAMP
          - OBJECT
          - BOOLEAN
      description:
        type: string
        description: Description of the feature source.
      fullyQualifiedName:
        type: string
        description: Fully qualified name of the ML Feature Source that includes `serviceName.[databaseName].tableName/fileName/apiName.columnName[.nestedColumnName]`.
        minLength: 1
        maxLength: 256
      tags:
        type: array
        description: Tags associated with the feature source.
        items:
          $ref: '#/definitions/TagLabel'
  MlHyperParameter:
    type: object
    properties:
      name:
        type: string
        description: Hyper parameter name.
      value:
        type: string
        description: Hyper parameter value.
      description:
        type: string
        description: Description of the Hyper Parameter.
  MlModel:
    type: object
    required:
      - algorithm
      - id
      - name
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this ML Model.
        minLength: 1
        maxLength: 128
      fullyQualifiedName:
        type: string
        description: A unique name that identifies an ML Model.
        minLength: 1
        maxLength: 256
      displayName:
        type: string
        description: Display Name that identifies this ML Model.
      description:
        type: string
        description: Description of the ML Model, what it is, and how to use it.
      algorithm:
        type: string
        description: Algorithm used to train the ML Model.
      mlFeatures:
        type: array
        description: Features used to train the ML Model.
        items:
          $ref: '#/definitions/MlFeature'
      mlHyperParameters:
        type: array
        description: Hyper Parameters used to train the ML Model.
        items:
          $ref: '#/definitions/MlHyperParameter'
      dashboard:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      mlStore:
        description: Location containing the ML Model. It can be a storage layer and/or a container repository.
        $ref: '#/definitions/MlStore'
      server:
        type: string
        format: uri
        description: URI that points to a resource.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      followers:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this ML Model.
        items:
          $ref: '#/definitions/TagLabel'
      usageSummary:
        description: This schema defines the type for usage details. Daily, weekly, and monthly aggregation of usage is computed along with the percentile rank based on the usage for a given day.
        $ref: '#/definitions/UsageDetails'
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  MlStore:
    type: object
    properties:
      storage:
        type: string
        format: uri
        description: URI that points to a resource.
      imageRepository:
        type: string
        format: uri
        description: URI that points to a resource.
  ResultListMlModel:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/MlModel'
      paging:
        $ref: '#/definitions/Paging'
  CreateMlModel:
    type: object
    required:
      - algorithm
      - name
    properties:
      name:
        type: string
        description: Name that identifies this ML model.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this ML model. It could be title or label from the source services
      description:
        type: string
        description: Description of the ML model instance. How it was trained and for what it is used.
      algorithm:
        type: string
        description: Algorithm used to train the ML Model
      mlFeatures:
        type: array
        description: Features used to train the ML Model.
        items:
          $ref: '#/definitions/MlFeature'
      mlHyperParameters:
        type: array
        description: Hyper Parameters used to train the ML Model.
        items:
          $ref: '#/definitions/MlHyperParameter'
      dashboard:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      mlStore:
        description: Location containing the ML Model. It can be a storage layer and/or a container repository.
        $ref: '#/definitions/MlStore'
      server:
        type: string
        format: uri
        description: URI that points to a resource.
      tags:
        type: array
        description: Tags for this ML Model
        items:
          $ref: '#/definitions/TagLabel'
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
  ConnectorConfig:
    type: object
    properties:
      username:
        type: string
        description: username to connect  to the data source.
      password:
        type: string
        description: password to connect  to the data source.
      host:
        type: string
        description: Host and port of the data source.
      database:
        type: string
        description: Database of the data source.
      includeViews:
        type: boolean
        description: optional configuration to turn off fetching metadata for views.
      enableDataProfiler:
        type: boolean
        description: Run data profiler as part of ingestion to get table profile data.
      includeFilterPattern:
        type: array
        description: Regex to only fetch tables or databases that matches the pattern.
        items:
          type: string
      excludeFilterPattern:
        type: array
        description: Regex exclude tables or databases that matches the pattern.
        items:
          type: string
  Ingestion:
    type: object
    required:
      - connectorConfig
      - name
      - service
      - startDate
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this ingestion instance uniquely.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Ingestion.
      description:
        type: string
        description: Description of the workflow.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      fullyQualifiedName:
        type: string
        description: Name that uniquely identifies a Ingestion.
        minLength: 1
        maxLength: 256
      ingestionType:
        type: string
        description: Type of Ingestion - Bigquery, Redshift, Snowflake etc...
        enum:
          - bigquery
          - bigquery_usage
          - redshift
          - redshift_usage
          - snowflake
          - snowflake_usage
          - hive
          - mssql
          - looker
          - presto
          - postgres
          - redash
          - salesforce
      tags:
        type: array
        description: Tags associated with the Ingestion.
        items:
          $ref: '#/definitions/TagLabel'
      forceDeploy:
        type: boolean
        description: Deploy the workflow by overwriting existing workflow with the same name.
      pauseWorkflow:
        type: boolean
        description: pause the workflow from running once the deploy is finished successfully.
      concurrency:
        type: integer
        format: int32
        description: Concurrency of the Pipeline.
      startDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
      endDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
      nextExecutionDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
      workflowTimezone:
        type: string
        description: Timezone in which workflow going to be scheduled.
      retries:
        type: integer
        format: int32
        description: Retry workflow in case of failure.
      retryDelay:
        type: integer
        format: int32
        description: Delay between retries in seconds.
      workflowCatchup:
        type: boolean
        description: Run past executions if the start date is in the past.
      scheduleInterval:
        type: string
        description: Scheduler Interval for the Workflow in cron format.
      workflowTimeout:
        type: integer
        format: int32
        description: Timeout for the workflow in seconds.
      connectorConfig:
        description: This defines the configuration for connector.
        $ref: '#/definitions/ConnectorConfig'
      ingestionStatuses:
        type: array
        description: List of executions and status for the Ingestion Pipeline.
        items:
          $ref: '#/definitions/IngestionStatus'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  IngestionStatus:
    type: object
    properties:
      state:
        type: string
        description: Workflow status denotes if its failed or succeeded.
      startDate:
        type: string
        description: startDate of the Ingestion Pipeline run for this particular execution.
      endDate:
        type: string
        description: endDate of the Ingestion pipeline run for this particular execution.
  ResultListIngestion:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Ingestion'
      paging:
        $ref: '#/definitions/Paging'
  CreateIngestion:
    type: object
    required:
      - connectorConfig
      - name
      - service
      - startDate
    properties:
      name:
        type: string
        description: Name that identifies this ingestion instance uniquely.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Ingestion.
      description:
        type: string
        description: Description of the workflow.
      ingestionType:
        type: string
        description: Type of Ingestion - Bigquery, Redshift, Snowflake etc...
        enum:
          - bigquery
          - bigquery_usage
          - redshift
          - redshift_usage
          - snowflake
          - snowflake_usage
          - hive
          - mssql
          - looker
          - presto
          - postgres
          - redash
          - salesforce
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags associated with the Ingestion.
        items:
          $ref: '#/definitions/TagLabel'
      forceDeploy:
        type: boolean
        description: Deploy the workflow by overwriting existing workflow with the same name.
      pauseWorkflow:
        type: boolean
        description: pause the workflow from running once the deploy is finished successfully.
      concurrency:
        type: integer
        format: int32
        description: Concurrency of the Pipeline.
      startDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
      endDate:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
      workflowTimezone:
        type: string
        description: Timezone in which workflow going to be scheduled.
      retries:
        type: integer
        format: int32
        description: Retry workflow in case of failure
      retryDelay:
        type: integer
        format: int32
        description: Delay between retries in seconds.
      workflowCatchup:
        type: boolean
        description: Workflow catchup for past executions.
      scheduleInterval:
        type: string
        description: Scheduler Interval for the Workflow in cron format.
      workflowTimeout:
        type: integer
        format: int32
        description: Timeout for the workflow in seconds.
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      connectorConfig:
        description: This defines the configuration for connector.
        $ref: '#/definitions/ConnectorConfig'
  Pipeline:
    type: object
    required:
      - id
      - name
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this pipeline instance uniquely.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Pipeline. It could be title or label from the source services.
      fullyQualifiedName:
        type: string
        description: A unique name that identifies a pipeline in the format 'ServiceName.PipelineName'.
      description:
        type: string
        description: Description of this Pipeline.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      pipelineUrl:
        type: string
        format: uri
        description: Pipeline  URL to visit/manage. This URL points to respective pipeline service UI.
      concurrency:
        type: integer
        format: int32
        description: Concurrency of the Pipeline.
      pipelineLocation:
        type: string
        description: Pipeline Code Location.
      startDate:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      tasks:
        type: array
        description: All the tasks that are part of pipeline.
        items:
          $ref: '#/definitions/Task'
      followers:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this Pipeline.
        items:
          $ref: '#/definitions/TagLabel'
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      serviceType:
        type: string
        description: Type of pipeline service - Airflow or Prefect.
        enum:
          - Airflow
          - Prefect
          - Glue
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  Task:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Name that identifies this task instance uniquely.
      displayName:
        type: string
        description: Display Name that identifies this Task. It could be title or label from the pipeline services.
      fullyQualifiedName:
        type: string
        description: A unique name that identifies a pipeline in the format 'ServiceName.PipelineName.TaskName'.
      description:
        type: string
        description: Description of this Task.
      taskUrl:
        type: string
        format: uri
        description: Task URL to visit/manage. This URL points to respective pipeline service UI.
      downstreamTasks:
        type: array
        description: All the tasks that are downstream of this task.
        items:
          type: string
      taskType:
        type: string
        description: Type of the Task. Usually refers to the class it implements.
      taskSQL:
        type: string
        description: SQL query statement. Example - 'select * from orders'.
      tags:
        type: array
        description: Tags for this task.
        items:
          $ref: '#/definitions/TagLabel'
  ResultListPipeline:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Pipeline'
      paging:
        $ref: '#/definitions/Paging'
  CreatePipeline:
    type: object
    required:
      - name
      - service
    properties:
      name:
        type: string
        description: Name that identifies this pipeline instance uniquely.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this Pipeline. It could be title or label from the source services.
      description:
        type: string
        description: Description of the database instance. What it has and how to use it.
      pipelineUrl:
        type: string
        format: uri
        description: Pipeline  URL to visit/manage. This URL points to respective pipeline service UI
      concurrency:
        type: integer
        format: int32
        description: Concurrency of the Pipeline
      pipelineLocation:
        type: string
        description: Pipeline Code Location
      startDate:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      tasks:
        type: array
        description: All the tasks that are part of pipeline.
        items:
          $ref: '#/definitions/Task'
      tags:
        type: array
        description: Tags for this Pipeline.
        items:
          $ref: '#/definitions/TagLabel'
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
  Policy:
    type: object
    required:
      - id
      - name
      - policyType
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this Policy.
        minLength: 1
        maxLength: 128
      fullyQualifiedName:
        type: string
        description: Name that uniquely identifies a Policy.
        minLength: 1
        maxLength: 256
      displayName:
        type: string
        description: Title for this Policy.
      description:
        type: string
        description: A short description of the Policy, comprehensible to regular users.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      policyUrl:
        type: string
        format: uri
        description: Link to a well documented definition of this Policy.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      policyType:
        type: string
        description: This schema defines the type used for describing different types of policies.
        enum:
          - AccessControl
          - Lifecycle
      enabled:
        type: boolean
        description: Is the policy enabled.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
      rules:
        type: array
        description: A set of rules associated with the Policy.
        items:
          type: object
  ResultListPolicy:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Policy'
      paging:
        $ref: '#/definitions/Paging'
  CreatePolicy:
    type: object
    required:
      - name
      - policyType
    properties:
      name:
        type: string
        description: Name that identifies this Policy.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Title for this Policy.
      description:
        type: string
        description: A short description of the Policy, comprehensible to regular users.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      policyUrl:
        type: string
        format: uri
        description: Link to a well documented definition of this Policy.
      policyType:
        type: string
        description: This schema defines the type used for describing different types of policies.
        enum:
          - AccessControl
          - Lifecycle
      rules:
        type: array
        description: A set of rules associated with the Policy.
        items:
          type: object
  Report:
    type: object
    required:
      - id
      - name
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this report instance uniquely.
        minLength: 1
        maxLength: 128
      fullyQualifiedName:
        type: string
        description: A unique name that identifies a report in the format 'ServiceName.ReportName'.
        minLength: 1
        maxLength: 256
      displayName:
        type: string
        description: Display Name that identifies this report. It could be title or label from the source services.
      description:
        type: string
        description: Description of this report instance.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      usageSummary:
        description: This schema defines the type for usage details. Daily, weekly, and monthly aggregation of usage is computed along with the percentile rank based on the usage for a given day.
        $ref: '#/definitions/UsageDetails'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListReport:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Report'
      paging:
        $ref: '#/definitions/Paging'
  DashboardService:
    type: object
    required:
      - dashboardUrl
      - id
      - name
      - serviceType
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this dashboard service.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this dashboard service.
      serviceType:
        type: string
        description: Type of Dashboard service - Superset, Looker, Redash or Tableau.
        enum:
          - Superset
          - Looker
          - Tableau
          - Redash
          - Metabase
      description:
        type: string
        description: Description of a dashboard service instance.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      dashboardUrl:
        type: string
        format: uri
        description: Dashboard Service URL. This will be used to make REST API calls to Dashboard Service.
      username:
        type: string
        description: Username to log-into Dashboard Service.
      password:
        type: string
        description: Password to log-into Dashboard Service.
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  Schedule:
    type: object
    properties:
      startDate:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      repeatFrequency:
        type: string
        description: Duration in ISO 8601 format in UTC. Example - 'P23DT23H'.
  CreateDashboardService:
    type: object
    required:
      - dashboardUrl
      - name
      - serviceType
    properties:
      name:
        type: string
        description: Name that identifies the this entity instance uniquely
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Description of dashboard service entity.
      serviceType:
        type: string
        description: Type of Dashboard service - Superset, Looker, Redash or Tableau.
        enum:
          - Superset
          - Looker
          - Tableau
          - Redash
          - Metabase
      dashboardUrl:
        type: string
        format: uri
        description: Dashboard Service URL
      username:
        type: string
        description: Username to log-into Dashboard Service
      password:
        type: string
        description: Password to log-into Dashboard Service
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
  ResultListDashboardService:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/DashboardService'
      paging:
        $ref: '#/definitions/Paging'
  DatabaseService:
    type: object
    required:
      - href
      - id
      - jdbc
      - name
      - serviceType
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this database service.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this database service.
      serviceType:
        type: string
        description: Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
        enum:
          - BigQuery
          - MySQL
          - Redshift
          - Snowflake
          - Postgres
          - MSSQL
          - Oracle
          - Athena
          - Hive
          - Presto
          - Trino
          - Vertica
          - Glue
          - MariaDB
          - Druid
      description:
        type: string
        description: Description of a database service instance.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      jdbc:
        description: Type for capturing JDBC connector information.
        $ref: '#/definitions/JdbcInfo'
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  JdbcInfo:
    type: object
    required:
      - connectionUrl
      - driverClass
    properties:
      driverClass:
        type: string
        description: Type used for JDBC driver class.
      connectionUrl:
        type: string
        description: Type used for JDBC connection URL of format `url_scheme://<username>:<password>@<host>:<port>/<db_name>`.
  CreateDatabaseService:
    type: object
    required:
      - jdbc
      - name
      - serviceType
    properties:
      name:
        type: string
        description: Name that identifies the this entity instance uniquely
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Description of Database entity.
      serviceType:
        type: string
        description: Type of database service such as MySQL, BigQuery, Snowflake, Redshift, Postgres...
        enum:
          - BigQuery
          - MySQL
          - Redshift
          - Snowflake
          - Postgres
          - MSSQL
          - Oracle
          - Athena
          - Hive
          - Presto
          - Trino
          - Vertica
          - Glue
          - MariaDB
          - Druid
      jdbc:
        description: Type for capturing JDBC connector information.
        $ref: '#/definitions/JdbcInfo'
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
  ResultListDatabaseService:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/DatabaseService'
      paging:
        $ref: '#/definitions/Paging'
  MessagingService:
    type: object
    required:
      - brokers
      - id
      - name
      - serviceType
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this messaging service.
        minLength: 1
        maxLength: 128
      serviceType:
        type: string
        description: Type of messaging service - Kafka or Pulsar.
        enum:
          - Kafka
          - Pulsar
      description:
        type: string
        description: Description of a messaging service instance.
      displayName:
        type: string
        description: Display Name that identifies this messaging service. It could be title or label from the source services.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      brokers:
        type: array
        description: Multiple bootstrap addresses for Kafka. Single proxy address for Pulsar.
        items:
          type: string
      schemaRegistry:
        type: string
        format: uri
        description: Schema registry URL.
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  CreateMessagingService:
    type: object
    required:
      - brokers
      - name
      - serviceType
    properties:
      name:
        type: string
        description: Name that identifies the this entity instance uniquely
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Description of messaging service entity.
      serviceType:
        type: string
        description: Type of messaging service - Kafka or Pulsar.
        enum:
          - Kafka
          - Pulsar
      brokers:
        type: array
        description: Multiple bootstrap addresses for Kafka. Single proxy address for Pulsar.
        items:
          type: string
      schemaRegistry:
        type: string
        format: uri
        description: Schema registry URL
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
  ResultListMessagingService:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/MessagingService'
      paging:
        $ref: '#/definitions/Paging'
  PipelineService:
    type: object
    required:
      - id
      - name
      - pipelineUrl
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this pipeline service.
        minLength: 1
        maxLength: 128
      serviceType:
        type: string
        description: Type of pipeline service - Airflow or Prefect.
        enum:
          - Airflow
          - Prefect
          - Glue
      description:
        type: string
        description: Description of a pipeline service instance.
      displayName:
        type: string
        description: Display Name that identifies this pipeline service. It could be title or label from the source services.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      pipelineUrl:
        type: string
        format: uri
        description: Pipeline Service Management/UI URL.
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  CreatePipelineService:
    type: object
    required:
      - name
      - pipelineUrl
      - serviceType
    properties:
      name:
        type: string
        description: Name that identifies the this entity instance uniquely
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Description of pipeline service entity.
      serviceType:
        type: string
        description: Type of pipeline service - Airflow or Prefect.
        enum:
          - Airflow
          - Prefect
          - Glue
      pipelineUrl:
        type: string
        format: uri
        description: Pipeline UI URL
      ingestionSchedule:
        description: This schema defines the type used for the schedule. The schedule has a start time and repeat frequency.
        $ref: '#/definitions/Schedule'
  ResultListPipelineService:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/PipelineService'
      paging:
        $ref: '#/definitions/Paging'
  StorageService:
    type: object
    required:
      - href
      - id
      - name
      - serviceType
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies this storage service.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Display Name that identifies this storage service.
      serviceType:
        type: string
        description: Type of storage service such as S3, GCS, HDFS...
        enum:
          - S3
          - GCS
          - HDFS
          - ABFS
      description:
        type: string
        description: Description of a storage service instance.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  CreateStorageService:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: Name that identifies the this entity instance uniquely
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Description of Storage entity.
      serviceType:
        type: string
        description: Type of storage service such as S3, GCS, HDFS...
        enum:
          - S3
          - GCS
          - HDFS
          - ABFS
  ResultListStorageService:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/StorageService'
      paging:
        $ref: '#/definitions/Paging'
  Tag:
    type: object
    required:
      - description
      - name
    properties:
      name:
        type: string
        description: Name of the tag.
        minLength: 2
        maxLength: 25
      fullyQualifiedName:
        type: string
        description: Unique name of the tag of format Category.PrimaryTag.SecondaryTag.
      description:
        type: string
        description: Unique name of the tag category.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      usageCount:
        type: integer
        format: int32
        description: Count of how many times this tag and children tags are used.
      deprecated:
        type: boolean
        description: If the tag is deprecated.
      associatedTags:
        type: array
        description: Fully qualified names of tags associated with this tag. Associated tags captures relationship of one tag to another automatically. As an example a tag 'User.PhoneNumber' might have an associated tag 'PII.Sensitive'. When 'User.Address' is used to label a column in a table, 'PII.Sensitive' label is also applied automatically due to Associated tag relationship.
        items:
          type: string
      children:
        type: array
        description: Tags under this tag group or empty for tags at the leaf level.
        items:
          $ref: '#/definitions/Tag'
  TagCategory:
    type: object
    required:
      - categoryType
      - description
      - name
    properties:
      name:
        type: string
        description: Name of the tag.
        minLength: 2
        maxLength: 25
      displayName:
        type: string
        description: Display Name that identifies this tag category.
      description:
        type: string
        description: Description of the tag category.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      categoryType:
        type: string
        description: Type of tag category.
        enum:
          - Descriptive
          - Classification
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      usageCount:
        type: integer
        format: int32
        description: Count of how many times the tags from this tag category are used.
      children:
        type: array
        description: Tags under this category.
        items:
          $ref: '#/definitions/Tag'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  CreateTagCategory:
    type: object
    required:
      - categoryType
      - description
      - name
    properties:
      name:
        type: string
        description: Name of the tag.
        minLength: 2
        maxLength: 25
      description:
        type: string
        description: Description of the tag category
      categoryType:
        type: string
        description: Type of tag category.
        enum:
          - Descriptive
          - Classification
  CreateTag:
    type: object
    required:
      - description
      - name
    properties:
      name:
        type: string
        description: Name of the tag.
        minLength: 2
        maxLength: 25
      description:
        type: string
        description: Unique name of the tag category
      associatedTags:
        type: array
        description: Fully qualified names of tags associated with this tag
        items:
          type: string
  CategoryList:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/TagCategory'
      paging:
        $ref: '#/definitions/Paging'
  Profile:
    type: object
    properties:
      images:
        description: Links to a list of images of varying resolutions/sizes.
        $ref: '#/definitions/ImageList'
  Team:
    type: object
    required:
      - href
      - id
      - name
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: A unique name of the team typically the team ID from an identity provider. Example - group Id from LDAP.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Name used for display purposes. Example 'Data Science team'.
      description:
        type: string
        description: Description of the team.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      profile:
        description: This schema defines the type for a profile of a user, team, or organization.
        $ref: '#/definitions/Profile'
      deleted:
        type: boolean
        description: When true the team has been deleted.
      users:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      owns:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListTeam:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Team'
      paging:
        $ref: '#/definitions/Paging'
  CreateTeam:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: A unique name of the team typically the team ID from an identity provider. Example - group Id from LDAP.
        minLength: 1
        maxLength: 128
      displayName:
        type: string
        description: Optional name used for display purposes. Example 'Marketing Team'
      description:
        type: string
        description: Optional description of the team
      profile:
        description: This schema defines the type for a profile of a user, team, or organization.
        $ref: '#/definitions/Profile'
      users:
        type: array
        description: Optional IDs of users that are part of the team
        items:
          type: string
          format: uuid
  User:
    type: object
    required:
      - email
      - href
      - id
      - name
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: A unique name of the user, typically the user ID from an identity provider. Example - uid from LDAP.
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Used for user biography.
      displayName:
        type: string
        description: Name used for display purposes. Example 'FirstName LastName'.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      email:
        type: string
        description: Email address of a user or other entities.
        minLength: 6
        maxLength: 127
        pattern: ^\S+@\S+\.\S+$
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      timezone:
        type: string
        description: Timezone of the user.
      deactivated:
        type: boolean
        description: When true indicates the user has been deactivated. Users are deactivated instead of deleted.
      isBot:
        type: boolean
        description: When true indicates a special type of user called Bot.
      isAdmin:
        type: boolean
        description: When true indicates user is an administrator for the system with superuser privileges.
      profile:
        description: This schema defines the type for a profile of a user, team, or organization.
        $ref: '#/definitions/Profile'
      teams:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      owns:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      follows:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListUser:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/User'
      paging:
        $ref: '#/definitions/Paging'
  CreateUser:
    type: object
    required:
      - email
      - name
    properties:
      name:
        type: string
        description: A unique name of the user, typically the user ID from an identity provider. Example - uid from LDAP.
        minLength: 1
        maxLength: 128
      description:
        type: string
        description: Used for user biography.
      displayName:
        type: string
        description: Name used for display purposes. Example 'FirstName LastName'
      email:
        type: string
        description: Email address of a user or other entities.
        minLength: 6
        maxLength: 127
        pattern: ^\S+@\S+\.\S+$
      timezone:
        type: string
        description: Timezone of the user
      isBot:
        type: boolean
        description: When true indicates user is a bot with appropriate privileges
      isAdmin:
        type: boolean
        description: When true indicates user is an administrator for the system with superuser privileges
      profile:
        description: This schema defines the type for a profile of a user, team, or organization.
        $ref: '#/definitions/Profile'
      teams:
        type: array
        description: Teams that the user belongs to
        items:
          type: string
          format: uuid
  Topic:
    type: object
    required:
      - id
      - name
      - partitions
      - service
    properties:
      id:
        type: string
        format: uuid
        description: Unique id used to identify an entity.
      name:
        type: string
        description: Name that identifies a topic.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      fullyQualifiedName:
        type: string
        description: Name that uniquely identifies a topic in the format 'messagingServiceName.topicName'.
      displayName:
        type: string
        description: Display Name that identifies this topic. It could be title or label from the source services.
      description:
        type: string
        description: Description of the topic instance.
      version:
        type: number
        format: double
        description: Metadata version of the entity in the form `Major.Minor`. First version always starts from `0.1` when the entity is created. When the backward compatible changes are made to the entity, only the `Minor` version is incremented - example `1.0` is changed to `1.1`. When backward incompatible changes are made the `Major` version is incremented - example `1.1` to `2.0`.
      updatedAt:
        type: string
        format: date-time
        description: Date and time in ISO 8601 format. Example - '2018-11-13T20:20:39+00:00'.
      updatedBy:
        type: string
        description: User who made the update.
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      serviceType:
        type: string
        description: Type of messaging service - Kafka or Pulsar.
        enum:
          - Kafka
          - Pulsar
      partitions:
        type: integer
        format: int32
        description: Number of partitions into which the topic is divided.
        minimum: 1
        exclusiveMinimum: false
      schemaText:
        type: string
        description: Schema used for message serialization. Optional as some topics may not have associated schemas.
      schemaType:
        type: string
        description: Schema type used for the message.
        enum:
          - Avro
          - Protobuf
          - JSON
          - Other
      cleanupPolicies:
        type: array
        description: Topic clean up policies. For Kafka - `cleanup.policy` configuration.
        items:
          type: string
          enum:
            - DELETE
            - COMPACT
      retentionTime:
        type: number
        format: double
        description: Retention time in milliseconds. For Kafka - `retention.ms` configuration.
      replicationFactor:
        type: integer
        format: int32
        description: Replication Factor in integer (more than 1).
      maximumMessageSize:
        type: integer
        format: int32
        description: Maximum message size in bytes. For Kafka - `max.message.bytes` configuration.
      minimumInSyncReplicas:
        type: integer
        format: int32
        description: Minimum number replicas in sync to control durability. For Kafka - `min.insync.replicas` configuration.
      retentionSize:
        type: number
        format: double
        description: Maximum size of a partition in bytes before old data is discarded. For Kafka - `retention.bytes` configuration.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      followers:
        type: array
        items:
          $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this table.
        items:
          $ref: '#/definitions/TagLabel'
      href:
        type: string
        format: uri
        description: URI that points to a resource.
      changeDescription:
        description: Description of the change.
        $ref: '#/definitions/ChangeDescription'
  ResultListTopic:
    type: object
    required:
      - data
    properties:
      data:
        type: array
        items:
          $ref: '#/definitions/Topic'
      paging:
        $ref: '#/definitions/Paging'
  CreateTopic:
    type: object
    required:
      - name
      - partitions
      - service
    properties:
      name:
        type: string
        description: Name that identifies a topic.
        minLength: 1
        maxLength: 128
        pattern: ^[^.]*$
      description:
        type: string
        description: Description of the topic instance. What it has and how to use it.
      service:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      partitions:
        type: integer
        format: int32
        description: Number of partitions into which the topic is divided.
        minimum: 1
        exclusiveMinimum: false
      schemaText:
        type: string
        description: Schema used for message serialization. Optional as some topics may not have associated schemas.
      schemaType:
        type: string
        description: Schema type used for the message.
        enum:
          - Avro
          - Protobuf
          - JSON
          - Other
      cleanupPolicies:
        type: array
        description: Topic clean up policy. For Kafka - `cleanup.policy` configuration.
        items:
          type: string
          enum:
            - DELETE
            - COMPACT
      replicationFactor:
        type: integer
        format: int32
        description: Replication Factor in integer (more than 1).
      retentionTime:
        type: number
        format: double
        description: Retention time in milliseconds. For Kafka - `retention.ms` configuration.
      maximumMessageSize:
        type: integer
        format: int32
        description: Maximum message size in bytes. For Kafka - `max.message.bytes` configuration.
      minimumInSyncReplicas:
        type: integer
        format: int32
        description: Minimum number replicas in sync to control durability. For Kafka - `min.insync.replicas` configuration.
      retentionSize:
        type: number
        format: double
        description: Maximum size of a partition in bytes before old data is discarded. For Kafka - `retention.bytes` configuration.
      owner:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      tags:
        type: array
        description: Tags for this topic
        items:
          $ref: '#/definitions/TagLabel'
  EntityUsage:
    type: object
    required:
      - entity
      - usage
    properties:
      entity:
        description: This schema defines the EntityReference type used for referencing an entity. EntityReference is used for capturing relationships from one entity to another. For example, a table has an attribute called database of type EntityReference that captures the relationship of a table `belongs to a` database.
        $ref: '#/definitions/EntityReference'
      usage:
        type: array
        description: List usage details per day.
        items:
          $ref: '#/definitions/UsageDetails'
  DailyCount:
    type: object
    required:
      - count
      - date
    properties:
      count:
        type: integer
        format: int32
        description: Daily count of a measurement on the given date.
        minimum: 0
        exclusiveMinimum: false
      date:
        type: string
        description: Date in ISO 8601 format in UTC. Example - '2018-11-13'.
  CatalogVersion:
    type: object
    properties:
      version:
        type: string
        description: Software version of the catalog
      revision:
        type: string
        description: Software revision of the catalog
      timestamp:
        type: integer
        format: int64
        description: Timestamp in unixTimeMillis.
