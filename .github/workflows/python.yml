name: Python

on:
  #   push:
  #     tags: ["python-v*"]
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.10"
        toolchain:
          - "stable"
          # - "beta"

    steps:
      - uses: actions/checkout@v2

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        id: rust-toolchain
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Setup Python
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache Cargo
        uses: actions/cache@v2
        with:
          path: ~/.cargo
          key: cargo-cache-${{ steps.rust-toolchain.outputs.rustc_hash }}-${{ hashFiles('Cargo.lock') }}

      - name: Check Formatting
        uses: actions-rs/cargo@v1
        if: ${{ matrix.python-version == '3.10' && matrix.toolchain == 'stable' }}
        with:
          command: fmt
          args: -- --check

      - name: Run Clippy
        uses: actions-rs/cargo@v1
        if: ${{ matrix.python-version == '3.10' && matrix.toolchain == 'stable' }}
        with:
          command: clippy
          args: --all-targets -- -D clippy::all

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install native dependencies
        run: |
          poetry run maturin develop -m python/flight-fusion-server/Cargo.toml --extras=devel $(MATURIN_EXTRA_ARGS)

      - name: Install pyright
        run: npm install -g pyright

      - name: Run linters
        run: |
          poetry run black --check .
          poetry run pyright python/

      - name: Run python tests
        run: |
          poetry run pytest -v .
        env:
          RUST_BACKTRACE: !
