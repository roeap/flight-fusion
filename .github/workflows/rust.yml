name: Rust

on:
  push:
    branches: [main, "rust-v*"]
  pull_request:
    branches: [main, "rust-v*"]

env:
  CARGO_TERM_COLOR: always

jobs:
  # format:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install minimal stable with clippy and rustfmt
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: default
  #         toolchain: stable
  #         override: true
  #     - name: Format
  #       run: cargo fmt -- --check

  # test:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macOS-10.15
  #         - windows-2019
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: test-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
  #         restore-keys: |
  #           test-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
  #           test-${{ runner.os }}-cargo-
  #     - name: Install minimal stable with clippy and rustfmt
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: default
  #         toolchain: stable
  #         override: true
  #     - name: Run tests
  #       run: cargo test --verbose

  # build:
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os:
  #         - ubuntu-latest
  #         - macOS-10.15
  #         - windows-2019
  #   runs-on: ${{ matrix.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/cache@v2
  #       with:
  #         path: |
  #           ~/.cargo/bin/
  #           ~/.cargo/registry/index/
  #           ~/.cargo/registry/cache/
  #           ~/.cargo/git/db/
  #           target/
  #         key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
  #         restore-keys: |
  #           ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml') }}
  #           ${{ runner.os }}-cargo-
  #     - name: Install minimal stable with clippy and rustfmt
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         profile: default
  #         toolchain: stable
  #         override: true
  #     - name: build and lint with clippy
  #       run: cargo clippy

  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1

      - name: Setup Python
        uses: actions/setup-python@v2
        id: setup-python
        with:
          python-version: 3.9

      - uses: mbrobbel/rustfmt-check@master
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      - name: Cache cargo2junit
        id: cache-cargo2junit
        uses: actions/cache@v3
        with:
          path: ~/.cargo/bin/cargo2junit
          key: ${{ runner.os }}-cargo2junit

      - name: install cargo2junit
        run: cargo install cargo2junit || true # ignore failure, since it means that it's already in cache

      - name: Test
        # run: cargo test --all-features --no-fail-fast -- -Z unstable-options --format json --report-time | tee results.json && cat results.json | cargo2junit > results.xml
        run: cargo test --workspace --exclude arrow-adx --no-fail-fast -- -Z unstable-options --format json --report-time | tee results.json && cat results.json | cargo2junit > results.xml
        env:
          CARGO_INCREMENTAL: "0"
          RUSTFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"
          RUSTDOCFLAGS: "-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests"

      - uses: actions-rs/grcov@v0.1
        id: coverage

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        if: always()

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        if: always()
        with:
          files: ${{ steps.coverage.outputs.report }}
