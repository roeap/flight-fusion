---
global:
  postgresqlSecretName: "mlfusion-postgresql-secret"
  # A service account name to use for this chart and all subcharts. If this is set, then
  # mlfusion subcharts will not create their own service accounts.
  serviceAccountName: ""

replicaCount: 1
nameOverride: ""
fullnameOverride: ""
# Specify secrets to run containers based on images in private registries. See:
# https://kubernetes.io/docs/concepts/containers/images/#referring-to-an-imagepullsecrets-on-a-pod
imagePullSecrets: []

# Image of mlflow
image:
  # The docker image repository to use
  repository: mlflow
  # The docker image pull policy
  pullPolicy: IfNotPresent
  # The docker image tag to use. Default app version
  tag: ""

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true

  # Annotations to add to the service account. AWS EKS users can assign role arn from here.
  annotations:
    {}
    # eks.amazonaws.com/role-arn: ""

  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Annotations for the pod
podAnnotations: {}

# Security context for all pod
podSecurityContext:
  {}
  # fsGroup: 2000

# Security context for the mlflow container
securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # Specifies what type of Service should be created
  type: ClusterIP
  # Default Service port
  port: 5000

backendStore:
  # Specifies if you want to run database migration
  databaseMigration: false
  postgres:
    # Specifies if you want to use postgres backend storage
    enabled: false
    # Postgres host address. e.g. your RDS or Azure Postgres Service endpoint
    host: "" # required
    # Postgres service port
    port: 5432 # required
    # mlflow database name created before in the postgres instance
    database: "" # required
    # postgres database user name which can access to mlflow database
    user: "" # required
    # postgres database user password which can access to mlflow database
    password: "" # required

artifactRoot:
  azureBlob:
    # Specifies if you want to use Azure Blob Storage Mlflow Artifact Root
    enabled: false
    # Azure blob container name
    container: "" # required
    # Azure storage account name
    storageAccount: "" # required
    # Azure blobk container folder. If you want to use root level, please don't set anything.
    path: "" # optional
    # Azure Cloud Connection String for the container. Only onnectionString or accessKey required
    connectionString: "" # connectionString or accessKey required
    # Azure Cloud Storage Account Access Key for the container
    accessKey: "" # connectionString or accessKey required. Only onnectionString or accessKey required
  s3:
    # Specifies if you want to use AWS S3 Mlflow Artifact Root
    enabled: false
    # S3 bucket name
    bucket: "" # required
    # S3 bucket folder. If you want to use root level, please don't set anything.
    path: "" # optional
    # AWS IAM user AWS_ACCESS_KEY_ID which has attached policy for access to the S3 bucket
    awsAccessKeyId: "" # (awsAccessKeyId and awsSecretAccessKey) or roleArn serviceaccount annotation required
    # AWS IAM user AWS_SECRET_ACCESS_KEY which has attached policy for access to the S3 bucket
    awsSecretAccessKey: "" # (awsAccessKeyId and awsSecretAccessKey) or roleArn serviceaccount annotation required
  gcs:
    # Specifies if you want to use Google Cloud Storage Mlflow Artifact Root
    enabled: false
    # Google Cloud Storage bucket name
    bucket:
      "" # required
      # Google Cloud Storage bucket folder. If you want to use root level, please don't set anything.
    path: "" # optional

# Additional environment variables to set.
  # A Kubernetes ConfigMap will be created with these environment variables. See:
  # https://kubernetes.io/docs/concepts/configuration/configmap/
  #
  # Example:
  #
  # env:
  #   ENV_ONE: one
  #   ENV_TWO: two
  env: {}

  # Additional environment variables can be retrieved and set from ConfigMaps. See:
  # https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables
  #
  # Example:
  #
  # envConfigMaps:
  #   - name: config-map
  envConfigMaps: []

  # Additional environment variables can be retrieved and set from Secrets. See:
  # https://kubernetes.io/docs/concepts/configuration/secret/#use-case-as-container-environment-variables
  #
  # Example:
  #
  # envSecrets:
  #   - name: secret
  envSecrets: []

ingress:
  # Specifies if you want to create an ingress access
  enabled: false
  # New style ingress class name. Only possible if you use K8s 1.18.0 or later version
  className: ""
  # Additional ingress annotations
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          # -- Ingress path type
          pathType: ImplementationSpecific
  # -- Ingress tls configuration for https access
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Set the resources requests and limits
resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  namespace: monitoring
  # Set how frequently Prometheus should scrape
  interval: 30s
  # Set path to mlflow telemtery-path
  telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  labels:
    # default `kube prometheus stack` helm chart serviceMonitor selector label
    # Mostly it's your prometheus helm release name. Please find more information from here:
    # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/troubleshooting.md#troubleshooting-servicemonitor-changes
    release: prometheus
  # Set timeout for scrape
  timeout: 10s
  # Set of labels to transfer on the Kubernetes Service onto the target.
  targetLabels: []

  # Set of rules to relabel your exist metric labels
  metricRelabelings:
    []
    # - sourceLabels: [prometheus_replica]
    #   regex: (.*)
    #   targetLabel: another_prometheus_replica
    #   action: replace
    # - regex: prometheus_replica
    #   action: labeldrop

# Set the node selector for the pod.
nodeSelector: {}

# Set the tolerations for the pod.
tolerations: []

# Set the affinity for the pod.
affinity: {}

####################################################################################################
# Extra Manifests: (Optional) Create additional k8s resources within this chart
####################################################################################################
extraManifests: []
